<?php
/**
 * EventsaddedtocartParams
 *
 * PHP version 5
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Data Management
 *
 * Welcome to Synerise API Reference! We hope that you'll enjoy your stay here.  If you need help with our services, feel free to contact us at  [support@synerise.com](mailto:support@synerise.com).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: Jul 4, 2022 12:12:40 PM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Synerise\DataManagement\Model;

use \ArrayAccess;
use \Synerise\DataManagement\ObjectSerializer;

/**
 * EventsaddedtocartParams Class Doc Comment
 *
 * @category Class
 * @description Additional parameters. Remember that you can use [event enrichment](https://help.synerise.com/docs/assets/events/adding-event-parameters/) to add the data automatically from a catalog.  Aside from the required parameters (if any exist), all events accept custom, free-form parameters, with the following restrictions:    &lt;span style&#x3D;\&quot;color:red\&quot;&gt;&lt;strong&gt;WARNING:&lt;/strong&gt;&lt;/span&gt;   - If you want to send the &#x60;email&#x60; param, it must be exactly the same as the email of the client who generated the event.   - Some params are reserved for system use. If you send them in the &#x60;params&#x60; object, they are ignored or overwritten with system-assigned values:&lt;br&gt;   &lt;code&gt;modifiedBy&lt;/code&gt;&lt;br&gt;   &lt;code&gt;apiKey&lt;/code&gt;&lt;br&gt;   &lt;code&gt;eventUUID&lt;/code&gt;&lt;br&gt;   &lt;code&gt;ip&lt;/code&gt;&lt;br&gt;   &lt;code&gt;time&lt;/code&gt;&lt;br&gt;   &lt;code&gt;businessProfileId&lt;/code&gt;
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventsaddedtocartParams implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'eventsaddedtocart_params';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sku' => 'string',
'name' => 'string',
'category' => 'string',
'categories' => 'string[]',
'offline' => 'bool',
'regular_unit_price' => '\Synerise\DataManagement\Model\EventsaddedtocartParamsRegularUnitPrice',
'discounted_unit_price' => '\Synerise\DataManagement\Model\EventsaddedtocartParamsDiscountedUnitPrice',
'final_unit_price' => '\Synerise\DataManagement\Model\EventsaddedtocartParamsFinalUnitPrice',
'item_url_address' => 'string',
'producer' => 'string',
'quantity' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sku' => null,
'name' => null,
'category' => null,
'categories' => null,
'offline' => null,
'regular_unit_price' => null,
'discounted_unit_price' => null,
'final_unit_price' => null,
'item_url_address' => null,
'producer' => null,
'quantity' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sku' => 'sku',
'name' => 'name',
'category' => 'category',
'categories' => 'categories',
'offline' => 'offline',
'regular_unit_price' => 'regularUnitPrice',
'discounted_unit_price' => 'discountedUnitPrice',
'final_unit_price' => 'finalUnitPrice',
'item_url_address' => 'ItemUrlAddress',
'producer' => 'producer',
'quantity' => 'quantity'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sku' => 'setSku',
'name' => 'setName',
'category' => 'setCategory',
'categories' => 'setCategories',
'offline' => 'setOffline',
'regular_unit_price' => 'setRegularUnitPrice',
'discounted_unit_price' => 'setDiscountedUnitPrice',
'final_unit_price' => 'setFinalUnitPrice',
'item_url_address' => 'setItemUrlAddress',
'producer' => 'setProducer',
'quantity' => 'setQuantity'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sku' => 'getSku',
'name' => 'getName',
'category' => 'getCategory',
'categories' => 'getCategories',
'offline' => 'getOffline',
'regular_unit_price' => 'getRegularUnitPrice',
'discounted_unit_price' => 'getDiscountedUnitPrice',
'final_unit_price' => 'getFinalUnitPrice',
'item_url_address' => 'getItemUrlAddress',
'producer' => 'getProducer',
'quantity' => 'getQuantity'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['offline'] = isset($data['offline']) ? $data['offline'] : null;
        $this->container['regular_unit_price'] = isset($data['regular_unit_price']) ? $data['regular_unit_price'] : null;
        $this->container['discounted_unit_price'] = isset($data['discounted_unit_price']) ? $data['discounted_unit_price'] : null;
        $this->container['final_unit_price'] = isset($data['final_unit_price']) ? $data['final_unit_price'] : null;
        $this->container['item_url_address'] = isset($data['item_url_address']) ? $data['item_url_address'] : null;
        $this->container['producer'] = isset($data['producer']) ? $data['producer'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sku'] === null) {
            $invalidProperties[] = "'sku' can't be null";
        }
        if ($this->container['final_unit_price'] === null) {
            $invalidProperties[] = "'final_unit_price' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku SKU of the item
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Item name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category Item category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[] $categories If an item belongs to more than one category, include the categories in an array
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets offline
     *
     * @return bool
     */
    public function getOffline()
    {
        return $this->container['offline'];
    }

    /**
     * Sets offline
     *
     * @param bool $offline Set to `true` if the event occurred outside a website, for example in a cash register
     *
     * @return $this
     */
    public function setOffline($offline)
    {
        $this->container['offline'] = $offline;

        return $this;
    }

    /**
     * Gets regular_unit_price
     *
     * @return \Synerise\DataManagement\Model\EventsaddedtocartParamsRegularUnitPrice
     */
    public function getRegularUnitPrice()
    {
        return $this->container['regular_unit_price'];
    }

    /**
     * Sets regular_unit_price
     *
     * @param \Synerise\DataManagement\Model\EventsaddedtocartParamsRegularUnitPrice $regular_unit_price regular_unit_price
     *
     * @return $this
     */
    public function setRegularUnitPrice($regular_unit_price)
    {
        $this->container['regular_unit_price'] = $regular_unit_price;

        return $this;
    }

    /**
     * Gets discounted_unit_price
     *
     * @return \Synerise\DataManagement\Model\EventsaddedtocartParamsDiscountedUnitPrice
     */
    public function getDiscountedUnitPrice()
    {
        return $this->container['discounted_unit_price'];
    }

    /**
     * Sets discounted_unit_price
     *
     * @param \Synerise\DataManagement\Model\EventsaddedtocartParamsDiscountedUnitPrice $discounted_unit_price discounted_unit_price
     *
     * @return $this
     */
    public function setDiscountedUnitPrice($discounted_unit_price)
    {
        $this->container['discounted_unit_price'] = $discounted_unit_price;

        return $this;
    }

    /**
     * Gets final_unit_price
     *
     * @return \Synerise\DataManagement\Model\EventsaddedtocartParamsFinalUnitPrice
     */
    public function getFinalUnitPrice()
    {
        return $this->container['final_unit_price'];
    }

    /**
     * Sets final_unit_price
     *
     * @param \Synerise\DataManagement\Model\EventsaddedtocartParamsFinalUnitPrice $final_unit_price final_unit_price
     *
     * @return $this
     */
    public function setFinalUnitPrice($final_unit_price)
    {
        $this->container['final_unit_price'] = $final_unit_price;

        return $this;
    }

    /**
     * Gets item_url_address
     *
     * @return string
     */
    public function getItemUrlAddress()
    {
        return $this->container['item_url_address'];
    }

    /**
     * Sets item_url_address
     *
     * @param string $item_url_address URL address of the product page
     *
     * @return $this
     */
    public function setItemUrlAddress($item_url_address)
    {
        $this->container['item_url_address'] = $item_url_address;

        return $this;
    }

    /**
     * Gets producer
     *
     * @return string
     */
    public function getProducer()
    {
        return $this->container['producer'];
    }

    /**
     * Sets producer
     *
     * @param string $producer Manufacturer of the product
     *
     * @return $this
     */
    public function setProducer($producer)
    {
        $this->container['producer'] = $producer;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity The amount of goods
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
