<?php
/**
 * TransactionsBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Data Management
 *
 * Welcome to Synerise API Reference! We hope that you'll enjoy your stay here.  If you need help with our services, feel free to contact us at  [support@synerise.com](mailto:support@synerise.com).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: Jul 4, 2022 12:12:40 PM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Synerise\DataManagement\Model;

use \ArrayAccess;
use \Synerise\DataManagement\ObjectSerializer;

/**
 * TransactionsBody Class Doc Comment
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionsBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'transactions_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client' => '\Synerise\DataManagement\Model\TransactionsClient',
'discount_amount' => '\Synerise\DataManagement\Model\TransactionsDiscountAmount',
'metadata' => 'map[string,object]',
'order_id' => 'string',
'payment_info' => '\Synerise\DataManagement\Model\TransactionsPaymentInfo',
'products' => '\Synerise\DataManagement\Model\TransactionsProducts[]',
'recorded_at' => '\DateTime',
'revenue' => '\Synerise\DataManagement\Model\TransactionsRevenue',
'value' => '\Synerise\DataManagement\Model\TransactionsValue',
'source' => 'string',
'event_salt' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client' => null,
'discount_amount' => null,
'metadata' => null,
'order_id' => null,
'payment_info' => null,
'products' => null,
'recorded_at' => 'date-time',
'revenue' => null,
'value' => null,
'source' => null,
'event_salt' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client' => 'client',
'discount_amount' => 'discountAmount',
'metadata' => 'metadata',
'order_id' => 'orderId',
'payment_info' => 'paymentInfo',
'products' => 'products',
'recorded_at' => 'recordedAt',
'revenue' => 'revenue',
'value' => 'value',
'source' => 'source',
'event_salt' => 'eventSalt'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client' => 'setClient',
'discount_amount' => 'setDiscountAmount',
'metadata' => 'setMetadata',
'order_id' => 'setOrderId',
'payment_info' => 'setPaymentInfo',
'products' => 'setProducts',
'recorded_at' => 'setRecordedAt',
'revenue' => 'setRevenue',
'value' => 'setValue',
'source' => 'setSource',
'event_salt' => 'setEventSalt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client' => 'getClient',
'discount_amount' => 'getDiscountAmount',
'metadata' => 'getMetadata',
'order_id' => 'getOrderId',
'payment_info' => 'getPaymentInfo',
'products' => 'getProducts',
'recorded_at' => 'getRecordedAt',
'revenue' => 'getRevenue',
'value' => 'getValue',
'source' => 'getSource',
'event_salt' => 'getEventSalt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SOURCE_WEB_DESKTOP = 'WEB_DESKTOP';
const SOURCE_WEB_MOBILE = 'WEB_MOBILE';
const SOURCE_MOBILE_APP = 'MOBILE_APP';
const SOURCE_POS = 'POS';
const SOURCE_MOBILE = 'MOBILE';
const SOURCE_DESKTOP = 'DESKTOP';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_WEB_DESKTOP,
self::SOURCE_WEB_MOBILE,
self::SOURCE_MOBILE_APP,
self::SOURCE_POS,
self::SOURCE_MOBILE,
self::SOURCE_DESKTOP,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['payment_info'] = isset($data['payment_info']) ? $data['payment_info'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['recorded_at'] = isset($data['recorded_at']) ? $data['recorded_at'] : null;
        $this->container['revenue'] = isset($data['revenue']) ? $data['revenue'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['event_salt'] = isset($data['event_salt']) ? $data['event_salt'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['client'] === null) {
            $invalidProperties[] = "'client' can't be null";
        }
        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['payment_info'] === null) {
            $invalidProperties[] = "'payment_info' can't be null";
        }
        if ($this->container['products'] === null) {
            $invalidProperties[] = "'products' can't be null";
        }
        if ($this->container['revenue'] === null) {
            $invalidProperties[] = "'revenue' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client
     *
     * @return \Synerise\DataManagement\Model\TransactionsClient
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param \Synerise\DataManagement\Model\TransactionsClient $client client
     *
     * @return $this
     */
    public function setClient($client)
    {
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return \Synerise\DataManagement\Model\TransactionsDiscountAmount
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param \Synerise\DataManagement\Model\TransactionsDiscountAmount $discount_amount discount_amount
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,object]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,object] $metadata Any custom parameters
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id ID of the transaction
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets payment_info
     *
     * @return \Synerise\DataManagement\Model\TransactionsPaymentInfo
     */
    public function getPaymentInfo()
    {
        return $this->container['payment_info'];
    }

    /**
     * Sets payment_info
     *
     * @param \Synerise\DataManagement\Model\TransactionsPaymentInfo $payment_info payment_info
     *
     * @return $this
     */
    public function setPaymentInfo($payment_info)
    {
        $this->container['payment_info'] = $payment_info;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \Synerise\DataManagement\Model\TransactionsProducts[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \Synerise\DataManagement\Model\TransactionsProducts[] $products A list of products in the transaction
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets recorded_at
     *
     * @return \DateTime
     */
    public function getRecordedAt()
    {
        return $this->container['recorded_at'];
    }

    /**
     * Sets recorded_at
     *
     * @param \DateTime $recorded_at Timestamp in ISO 8601. If not defined, the current time applies.  By default, the time is in UTC.  If you want to include a timezone, you can do this by adding `{+|-}hh:mm` at the end of the string. For example, if your timezone is UTC+1, add `+01:00`.  When you retrieve an event, the timestamp is calculated into UTC, even if the original POST request included a timezone. The original string with the timezone is included in the additional parameters of the event.
     *
     * @return $this
     */
    public function setRecordedAt($recorded_at)
    {
        $this->container['recorded_at'] = $recorded_at;

        return $this;
    }

    /**
     * Gets revenue
     *
     * @return \Synerise\DataManagement\Model\TransactionsRevenue
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue
     *
     * @param \Synerise\DataManagement\Model\TransactionsRevenue $revenue revenue
     *
     * @return $this
     */
    public function setRevenue($revenue)
    {
        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Gets value
     *
     * @return \Synerise\DataManagement\Model\TransactionsValue
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param \Synerise\DataManagement\Model\TransactionsValue $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source Source of the event.
     *
     * @return $this
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets event_salt
     *
     * @return string
     */
    public function getEventSalt()
    {
        return $this->container['event_salt'];
    }

    /**
     * Sets event_salt
     *
     * @param string $event_salt When an event has an `eventSalt`, it can be overwritten by sending another event with the same `eventSalt` and `time` as the original event. - `eventSalt` must be unique in a business profile. - The parameter cannot be retrieved later. You must keep track of the values that you send. - An event that has no `eventSalt` cannot be overwritten. The parameter cannot be added to an event at a later time.  An example of creating a salt is by generating a UUID or concatenating the event's label and timestamp, including milliseconds. This creates a value whose possibility of being duplicated is practically zero.
     *
     * @return $this
     */
    public function setEventSalt($event_salt)
    {
        $this->container['event_salt'] = $event_salt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
