<?php
/**
 * RelationDataSourceData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Data Management
 *
 * Welcome to Synerise API Reference! We hope that you'll enjoy your stay here.  If you need help with our services, feel free to contact us at  [support@synerise.com](mailto:support@synerise.com).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: Jul 4, 2022 12:12:40 PM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Synerise\DataManagement\Model;

use \ArrayAccess;
use \Synerise\DataManagement\ObjectSerializer;

/**
 * RelationDataSourceData Class Doc Comment
 *
 * @category Class
 * @description Relation definition
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RelationDataSourceData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RelationDataSource_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rhs_schema_id' => 'string',
'relation_type' => 'string',
'display_field' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rhs_schema_id' => null,
'relation_type' => null,
'display_field' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rhs_schema_id' => 'rhsSchemaId',
'relation_type' => 'relationType',
'display_field' => 'displayField'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rhs_schema_id' => 'setRhsSchemaId',
'relation_type' => 'setRelationType',
'display_field' => 'setDisplayField'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rhs_schema_id' => 'getRhsSchemaId',
'relation_type' => 'getRelationType',
'display_field' => 'getDisplayField'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RELATION_TYPE_MANY_TO_ONE = 'many_to_one';
const RELATION_TYPE_ONE_TO_MANY = 'one_to_many';
const RELATION_TYPE_MANY_TO_MANY = 'many_to_many';
const RELATION_TYPE_ONE_TO_ONE = 'one_to_one';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRelationTypeAllowableValues()
    {
        return [
            self::RELATION_TYPE_MANY_TO_ONE,
self::RELATION_TYPE_ONE_TO_MANY,
self::RELATION_TYPE_MANY_TO_MANY,
self::RELATION_TYPE_ONE_TO_ONE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rhs_schema_id'] = isset($data['rhs_schema_id']) ? $data['rhs_schema_id'] : null;
        $this->container['relation_type'] = isset($data['relation_type']) ? $data['relation_type'] : null;
        $this->container['display_field'] = isset($data['display_field']) ? $data['display_field'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['rhs_schema_id'] === null) {
            $invalidProperties[] = "'rhs_schema_id' can't be null";
        }
        if ($this->container['relation_type'] === null) {
            $invalidProperties[] = "'relation_type' can't be null";
        }
        $allowedValues = $this->getRelationTypeAllowableValues();
        if (!is_null($this->container['relation_type']) && !in_array($this->container['relation_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'relation_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rhs_schema_id
     *
     * @return string
     */
    public function getRhsSchemaId()
    {
        return $this->container['rhs_schema_id'];
    }

    /**
     * Sets rhs_schema_id
     *
     * @param string $rhs_schema_id UUID of the schema that the relation refers to, called a Right-Hand Schema (RHS)
     *
     * @return $this
     */
    public function setRhsSchemaId($rhs_schema_id)
    {
        $this->container['rhs_schema_id'] = $rhs_schema_id;

        return $this;
    }

    /**
     * Gets relation_type
     *
     * @return string
     */
    public function getRelationType()
    {
        return $this->container['relation_type'];
    }

    /**
     * Sets relation_type
     *
     * @param string $relation_type *Origin schema* is the schema where this relation is defined. *RHS* is the schema identified by `rhsSchemaId`. - `one_to_many`: origin schema record can store multiple references to RHS records; RHS record can store one reference to origin schema record. - `many_to_one`: origin schema record can store one reference to RHS record; RHS record can store multiple references to origin schema records. - `many_to_many`: origin schema record can store multiple references to RHS records; RHS records can store multiple references to origin schema records. - `one_to_one`: origin schema record can store one reference to RHS record; RHS record can store one reference to origin schema record.
     *
     * @return $this
     */
    public function setRelationType($relation_type)
    {
        $allowedValues = $this->getRelationTypeAllowableValues();
        if (!in_array($relation_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'relation_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['relation_type'] = $relation_type;

        return $this;
    }

    /**
     * Gets display_field
     *
     * @return string
     */
    public function getDisplayField()
    {
        return $this->container['display_field'];
    }

    /**
     * Sets display_field
     *
     * @param string $display_field Unique name of the field whose value should represent the related record
     *
     * @return $this
     */
    public function setDisplayField($display_field)
    {
        $this->container['display_field'] = $display_field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
