<?php
/**
 * CatalogsApi
 * PHP version 5
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Data Management
 *
 * Welcome to Synerise API Reference! We hope that you'll enjoy your stay here.  If you need help with our services, feel free to contact us at  [support@synerise.com](mailto:support@synerise.com).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: Jul 4, 2022 12:12:40 PM
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Synerise\DataManagement\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Synerise\DataManagement\ApiException;
use Synerise\DataManagement\Configuration;
use Synerise\DataManagement\HeaderSelector;
use Synerise\DataManagement\ObjectSerializer;

/**
 * CatalogsApi Class Doc Comment
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CatalogsApi
{
	/**
	 * @var ClientInterface
	 */
	protected $client;

	/**
	 * @var Configuration
	 */
	protected $config;

	/**
	 * @var HeaderSelector
	 */
	protected $headerSelector;

	/**
	 * @param ClientInterface $client
	 * @param Configuration   $config
	 * @param HeaderSelector  $selector
	 */
	public function __construct(
		ClientInterface $client = null,
		Configuration $config = null,
		HeaderSelector $selector = null
	) {
		$this->client = $client ?: new Client();
		$this->config = $config ?: new Configuration();
		$this->headerSelector = $selector ?: new HeaderSelector();
	}

	/**
	 * @return Configuration
	 */
	public function getConfig()
	{
		return $this->config;
	}

	/**
	 * Operation addBag
	 *
	 * Add catalog
	 *
	 * @param  \Synerise\DataManagement\Model\BagsBody $body body (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Synerise\DataManagement\Model\InlineResponse20017
	 */
	public function addBag($body)
	{
		list($response) = $this->addBagWithHttpInfo($body);
		return $response;
	}

	/**
	 * Operation addBagWithHttpInfo
	 *
	 * Add catalog
	 *
	 * @param  \Synerise\DataManagement\Model\BagsBody $body (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Synerise\DataManagement\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
	 */
	public function addBagWithHttpInfo($body)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20017';
		$request = $this->addBagRequest($body);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->__toString();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse20017',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 400:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation addBagAsync
	 *
	 * Add catalog
	 *
	 * @param  \Synerise\DataManagement\Model\BagsBody $body (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function addBagAsync($body)
	{
		return $this->addBagAsyncWithHttpInfo($body)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation addBagAsyncWithHttpInfo
	 *
	 * Add catalog
	 *
	 * @param  \Synerise\DataManagement\Model\BagsBody $body (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function addBagAsyncWithHttpInfo($body)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20017';
		$request = $this->addBagRequest($body);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'addBag'
	 *
	 * @param  \Synerise\DataManagement\Model\BagsBody $body (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function addBagRequest($body)
	{
		// verify the required parameter 'body' is set
		if ($body === null || (is_array($body) && count($body) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $body when calling addBag'
			);
		}

		$resourcePath = '/bags';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;



		// body params
		$_tempBody = null;
		if (isset($body)) {
			$_tempBody = $body;
		}

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json', 'text/plain']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json', 'text/plain'],
				['application/json']
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'POST',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation addItems
	 *
	 * Add item
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\CatalogIdItemsBody $body JSON object with any number of key/value pairs (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return bool
	 */
	public function addItems($catalog_id, $body = null)
	{
		list($response) = $this->addItemsWithHttpInfo($catalog_id, $body);
		return $response;
	}

	/**
	 * Operation addItemsWithHttpInfo
	 *
	 * Add item
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\CatalogIdItemsBody $body JSON object with any number of key/value pairs (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of bool, HTTP status code, HTTP response headers (array of strings)
	 */
	public function addItemsWithHttpInfo($catalog_id, $body = null)
	{
		$returnType = 'bool';
		$request = $this->addItemsRequest($catalog_id, $body);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'bool',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 400:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 404:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation addItemsAsync
	 *
	 * Add item
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\CatalogIdItemsBody $body JSON object with any number of key/value pairs (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function addItemsAsync($catalog_id, $body = null)
	{
		return $this->addItemsAsyncWithHttpInfo($catalog_id, $body)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation addItemsAsyncWithHttpInfo
	 *
	 * Add item
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\CatalogIdItemsBody $body JSON object with any number of key/value pairs (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function addItemsAsyncWithHttpInfo($catalog_id, $body = null)
	{
		$returnType = 'bool';
		$request = $this->addItemsRequest($catalog_id, $body);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'addItems'
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\CatalogIdItemsBody $body JSON object with any number of key/value pairs (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function addItemsRequest($catalog_id, $body = null)
	{
		// verify the required parameter 'catalog_id' is set
		if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $catalog_id when calling addItems'
			);
		}

		$resourcePath = '/bags/{catalogId}/items';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;


		// path params
		if ($catalog_id !== null) {
			$resourcePath = str_replace(
				'{' . 'catalogId' . '}',
				ObjectSerializer::toPathValue($catalog_id),
				$resourcePath
			);
		}

		// body params
		$_tempBody = null;
		if (isset($body)) {
			$_tempBody = $body;
		}

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json', 'text/plain']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json', 'text/plain'],
				['application/json']
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'POST',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation addItemsBatch
	 *
	 * Batch add items
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\CatalogIdItemsBody[] $body JSON object with any number of key/value pairs (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return bool
	 */
	public function addItemsBatch($catalog_id, $body = null)
	{
		list($response) = $this->addItemsBatchWithHttpInfo($catalog_id, $body);
		return $response;
	}

	/**
	 * Operation addItemsBatchWithHttpInfo
	 *
	 * Batch add items
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\CatalogIdItemsBody[] $body JSON object with any number of key/value pairs (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of bool, HTTP status code, HTTP response headers (array of strings)
	 */
	public function addItemsBatchWithHttpInfo($catalog_id, $body = null)
	{
		$returnType = 'bool';
		$request = $this->addItemsBatchRequest($catalog_id, $body);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'bool',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 400:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 404:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation addItemsBatchAsync
	 *
	 * Batch add items
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\CatalogIdItemsBody[] $body JSON object with any number of key/value pairs (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function addItemsBatchAsync($catalog_id, $body = null)
	{
		return $this->addItemsBatchAsyncWithHttpInfo($catalog_id, $body)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation addItemsBatchAsyncWithHttpInfo
	 *
	 * Batch add items
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\CatalogIdItemsBody[] $body JSON object with any number of key/value pairs (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function addItemsBatchAsyncWithHttpInfo($catalog_id, $body = null)
	{
		$returnType = 'bool';
		$request = $this->addItemsBatchRequest($catalog_id, $body);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'addItemsBatch'
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\CatalogIdItemsBody[] $body JSON object with any number of key/value pairs (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function addItemsBatchRequest($catalog_id, $body = null)
	{
		// verify the required parameter 'catalog_id' is set
		if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $catalog_id when calling addItemsBatch'
			);
		}

		$resourcePath = '/bags/{catalogId}/items/batch';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;


		// path params
		if ($catalog_id !== null) {
			$resourcePath = str_replace(
				'{' . 'catalogId' . '}',
				ObjectSerializer::toPathValue($catalog_id),
				$resourcePath
			);
		}

		// body params
		$_tempBody = null;
		if (isset($body)) {
			$_tempBody = $body;
		}

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json', 'text/plain']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json', 'text/plain'],
				['application/json']
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'POST',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation addMapping
	 *
	 * Add mapping
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\CatalogIdMappingsBody $body body (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Synerise\DataManagement\Model\InlineResponse20024
	 */
	public function addMapping($catalog_id, $body = null)
	{
		list($response) = $this->addMappingWithHttpInfo($catalog_id, $body);
		return $response;
	}

	/**
	 * Operation addMappingWithHttpInfo
	 *
	 * Add mapping
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\CatalogIdMappingsBody $body (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Synerise\DataManagement\Model\InlineResponse20024, HTTP status code, HTTP response headers (array of strings)
	 */
	public function addMappingWithHttpInfo($catalog_id, $body = null)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20024';
		$request = $this->addMappingRequest($catalog_id, $body);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse20024',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 400:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 404:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation addMappingAsync
	 *
	 * Add mapping
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\CatalogIdMappingsBody $body (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function addMappingAsync($catalog_id, $body = null)
	{
		return $this->addMappingAsyncWithHttpInfo($catalog_id, $body)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation addMappingAsyncWithHttpInfo
	 *
	 * Add mapping
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\CatalogIdMappingsBody $body (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function addMappingAsyncWithHttpInfo($catalog_id, $body = null)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20024';
		$request = $this->addMappingRequest($catalog_id, $body);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'addMapping'
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\CatalogIdMappingsBody $body (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function addMappingRequest($catalog_id, $body = null)
	{
		// verify the required parameter 'catalog_id' is set
		if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $catalog_id when calling addMapping'
			);
		}

		$resourcePath = '/bags/{catalogId}/mappings';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;


		// path params
		if ($catalog_id !== null) {
			$resourcePath = str_replace(
				'{' . 'catalogId' . '}',
				ObjectSerializer::toPathValue($catalog_id),
				$resourcePath
			);
		}

		// body params
		$_tempBody = null;
		if (isset($body)) {
			$_tempBody = $body;
		}

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json', 'text/plain']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json', 'text/plain'],
				['application/json']
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'POST',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation deleteBagById
	 *
	 * Delete catalog
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Synerise\DataManagement\Model\InlineResponse20020
	 */
	public function deleteBagById($catalog_id)
	{
		list($response) = $this->deleteBagByIdWithHttpInfo($catalog_id);
		return $response;
	}

	/**
	 * Operation deleteBagByIdWithHttpInfo
	 *
	 * Delete catalog
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Synerise\DataManagement\Model\InlineResponse20020, HTTP status code, HTTP response headers (array of strings)
	 */
	public function deleteBagByIdWithHttpInfo($catalog_id)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20020';
		$request = $this->deleteBagByIdRequest($catalog_id);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse20020',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 404:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation deleteBagByIdAsync
	 *
	 * Delete catalog
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function deleteBagByIdAsync($catalog_id)
	{
		return $this->deleteBagByIdAsyncWithHttpInfo($catalog_id)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation deleteBagByIdAsyncWithHttpInfo
	 *
	 * Delete catalog
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function deleteBagByIdAsyncWithHttpInfo($catalog_id)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20020';
		$request = $this->deleteBagByIdRequest($catalog_id);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'deleteBagById'
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function deleteBagByIdRequest($catalog_id)
	{
		// verify the required parameter 'catalog_id' is set
		if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $catalog_id when calling deleteBagById'
			);
		}

		$resourcePath = '/bags/{catalogId}';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;


		// path params
		if ($catalog_id !== null) {
			$resourcePath = str_replace(
				'{' . 'catalogId' . '}',
				ObjectSerializer::toPathValue($catalog_id),
				$resourcePath
			);
		}

		// body params
		$_tempBody = null;

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json', 'text/plain']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json', 'text/plain'],
				[]
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'DELETE',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation deleteBagByIds
	 *
	 * Delete catalogs
	 *
	 * @param  string[] $body body (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Synerise\DataManagement\Model\InlineResponse20018
	 */
	public function deleteBagByIds($body = null)
	{
		list($response) = $this->deleteBagByIdsWithHttpInfo($body);
		return $response;
	}

	/**
	 * Operation deleteBagByIdsWithHttpInfo
	 *
	 * Delete catalogs
	 *
	 * @param  string[] $body (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Synerise\DataManagement\Model\InlineResponse20018, HTTP status code, HTTP response headers (array of strings)
	 */
	public function deleteBagByIdsWithHttpInfo($body = null)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20018';
		$request = $this->deleteBagByIdsRequest($body);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse20018',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 400:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation deleteBagByIdsAsync
	 *
	 * Delete catalogs
	 *
	 * @param  string[] $body (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function deleteBagByIdsAsync($body = null)
	{
		return $this->deleteBagByIdsAsyncWithHttpInfo($body)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation deleteBagByIdsAsyncWithHttpInfo
	 *
	 * Delete catalogs
	 *
	 * @param  string[] $body (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function deleteBagByIdsAsyncWithHttpInfo($body = null)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20018';
		$request = $this->deleteBagByIdsRequest($body);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'deleteBagByIds'
	 *
	 * @param  string[] $body (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function deleteBagByIdsRequest($body = null)
	{

		$resourcePath = '/bags';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;



		// body params
		$_tempBody = null;
		if (isset($body)) {
			$_tempBody = $body;
		}

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json', 'text/plain']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json', 'text/plain'],
				['application/json']
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'DELETE',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation deleteItem
	 *
	 * Delete single item by database ID
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#x27;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Synerise\DataManagement\Model\InlineResponse20023
	 */
	public function deleteItem($catalog_id, $item_id)
	{
		list($response) = $this->deleteItemWithHttpInfo($catalog_id, $item_id);
		return $response;
	}

	/**
	 * Operation deleteItemWithHttpInfo
	 *
	 * Delete single item by database ID
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#x27;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Synerise\DataManagement\Model\InlineResponse20023, HTTP status code, HTTP response headers (array of strings)
	 */
	public function deleteItemWithHttpInfo($catalog_id, $item_id)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20023';
		$request = $this->deleteItemRequest($catalog_id, $item_id);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse20023',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 404:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation deleteItemAsync
	 *
	 * Delete single item by database ID
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#x27;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function deleteItemAsync($catalog_id, $item_id)
	{
		return $this->deleteItemAsyncWithHttpInfo($catalog_id, $item_id)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation deleteItemAsyncWithHttpInfo
	 *
	 * Delete single item by database ID
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#x27;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function deleteItemAsyncWithHttpInfo($catalog_id, $item_id)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20023';
		$request = $this->deleteItemRequest($catalog_id, $item_id);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'deleteItem'
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#x27;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function deleteItemRequest($catalog_id, $item_id)
	{
		// verify the required parameter 'catalog_id' is set
		if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $catalog_id when calling deleteItem'
			);
		}
		// verify the required parameter 'item_id' is set
		if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $item_id when calling deleteItem'
			);
		}

		$resourcePath = '/bags/{catalogId}/items/{itemId}';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;


		// path params
		if ($catalog_id !== null) {
			$resourcePath = str_replace(
				'{' . 'catalogId' . '}',
				ObjectSerializer::toPathValue($catalog_id),
				$resourcePath
			);
		}
		// path params
		if ($item_id !== null) {
			$resourcePath = str_replace(
				'{' . 'itemId' . '}',
				ObjectSerializer::toPathValue($item_id),
				$resourcePath
			);
		}

		// body params
		$_tempBody = null;

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json', 'text/plain']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json', 'text/plain'],
				[]
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'DELETE',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation deleteMappingBykey
	 *
	 * Delete mapping
	 *
	 * @param  string $bp_action_param_key The unique identifier of the mapping (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Synerise\DataManagement\Model\InlineResponse20026
	 */
	public function deleteMappingBykey($bp_action_param_key)
	{
		list($response) = $this->deleteMappingBykeyWithHttpInfo($bp_action_param_key);
		return $response;
	}

	/**
	 * Operation deleteMappingBykeyWithHttpInfo
	 *
	 * Delete mapping
	 *
	 * @param  string $bp_action_param_key The unique identifier of the mapping (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Synerise\DataManagement\Model\InlineResponse20026, HTTP status code, HTTP response headers (array of strings)
	 */
	public function deleteMappingBykeyWithHttpInfo($bp_action_param_key)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20026';
		$request = $this->deleteMappingBykeyRequest($bp_action_param_key);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse20026',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 404:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation deleteMappingBykeyAsync
	 *
	 * Delete mapping
	 *
	 * @param  string $bp_action_param_key The unique identifier of the mapping (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function deleteMappingBykeyAsync($bp_action_param_key)
	{
		return $this->deleteMappingBykeyAsyncWithHttpInfo($bp_action_param_key)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation deleteMappingBykeyAsyncWithHttpInfo
	 *
	 * Delete mapping
	 *
	 * @param  string $bp_action_param_key The unique identifier of the mapping (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function deleteMappingBykeyAsyncWithHttpInfo($bp_action_param_key)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20026';
		$request = $this->deleteMappingBykeyRequest($bp_action_param_key);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'deleteMappingBykey'
	 *
	 * @param  string $bp_action_param_key The unique identifier of the mapping (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function deleteMappingBykeyRequest($bp_action_param_key)
	{
		// verify the required parameter 'bp_action_param_key' is set
		if ($bp_action_param_key === null || (is_array($bp_action_param_key) && count($bp_action_param_key) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $bp_action_param_key when calling deleteMappingBykey'
			);
		}

		$resourcePath = '/mappings/{bpActionParamKey}';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;


		// path params
		if ($bp_action_param_key !== null) {
			$resourcePath = str_replace(
				'{' . 'bpActionParamKey' . '}',
				ObjectSerializer::toPathValue($bp_action_param_key),
				$resourcePath
			);
		}

		// body params
		$_tempBody = null;

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json', 'text/plain']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json', 'text/plain'],
				[]
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'DELETE',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation downloadItemsCsv
	 *
	 * Add items from URL
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\ItemsDownloadBody $body body (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return bool
	 */
	public function downloadItemsCsv($catalog_id, $body = null)
	{
		list($response) = $this->downloadItemsCsvWithHttpInfo($catalog_id, $body);
		return $response;
	}

	/**
	 * Operation downloadItemsCsvWithHttpInfo
	 *
	 * Add items from URL
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\ItemsDownloadBody $body (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of bool, HTTP status code, HTTP response headers (array of strings)
	 */
	public function downloadItemsCsvWithHttpInfo($catalog_id, $body = null)
	{
		$returnType = 'bool';
		$request = $this->downloadItemsCsvRequest($catalog_id, $body);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'bool',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 400:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 404:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation downloadItemsCsvAsync
	 *
	 * Add items from URL
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\ItemsDownloadBody $body (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function downloadItemsCsvAsync($catalog_id, $body = null)
	{
		return $this->downloadItemsCsvAsyncWithHttpInfo($catalog_id, $body)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation downloadItemsCsvAsyncWithHttpInfo
	 *
	 * Add items from URL
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\ItemsDownloadBody $body (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function downloadItemsCsvAsyncWithHttpInfo($catalog_id, $body = null)
	{
		$returnType = 'bool';
		$request = $this->downloadItemsCsvRequest($catalog_id, $body);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'downloadItemsCsv'
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  \Synerise\DataManagement\Model\ItemsDownloadBody $body (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function downloadItemsCsvRequest($catalog_id, $body = null)
	{
		// verify the required parameter 'catalog_id' is set
		if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $catalog_id when calling downloadItemsCsv'
			);
		}

		$resourcePath = '/bags/{catalogId}/items/download';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;


		// path params
		if ($catalog_id !== null) {
			$resourcePath = str_replace(
				'{' . 'catalogId' . '}',
				ObjectSerializer::toPathValue($catalog_id),
				$resourcePath
			);
		}

		// body params
		$_tempBody = null;
		if (isset($body)) {
			$_tempBody = $body;
		}

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json', 'text/plain']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json', 'text/plain'],
				['application/json']
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'POST',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation getBagById
	 *
	 * Get catalog info
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Synerise\DataManagement\Model\InlineResponse20017
	 */
	public function getBagById($catalog_id)
	{
		list($response) = $this->getBagByIdWithHttpInfo($catalog_id);
		return $response;
	}

	/**
	 * Operation getBagByIdWithHttpInfo
	 *
	 * Get catalog info
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Synerise\DataManagement\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
	 */
	public function getBagByIdWithHttpInfo($catalog_id)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20017';
		$request = $this->getBagByIdRequest($catalog_id);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse20017',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 404:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation getBagByIdAsync
	 *
	 * Get catalog info
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getBagByIdAsync($catalog_id)
	{
		return $this->getBagByIdAsyncWithHttpInfo($catalog_id)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation getBagByIdAsyncWithHttpInfo
	 *
	 * Get catalog info
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getBagByIdAsyncWithHttpInfo($catalog_id)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20017';
		$request = $this->getBagByIdRequest($catalog_id);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'getBagById'
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function getBagByIdRequest($catalog_id)
	{
		// verify the required parameter 'catalog_id' is set
		if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $catalog_id when calling getBagById'
			);
		}

		$resourcePath = '/bags/{catalogId}';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;


		// path params
		if ($catalog_id !== null) {
			$resourcePath = str_replace(
				'{' . 'catalogId' . '}',
				ObjectSerializer::toPathValue($catalog_id),
				$resourcePath
			);
		}

		// body params
		$_tempBody = null;

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json', 'text/plain']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json', 'text/plain'],
				[]
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'GET',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation getBags
	 *
	 * Get catalogs
	 *
	 * @param  string $search_by A search string. You can search the catalogs by their name or the first or last name of the author. (optional)
	 * @param  string $order_by The parameter to order the results by. Order is always ascending. (optional)
	 * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
	 * @param  int $limit The maximum number of items to include in the response (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Synerise\DataManagement\Model\InlineResponse20016
	 */
	public function getBags($search_by = null, $order_by = null, $offset = null, $limit = null)
	{
		list($response) = $this->getBagsWithHttpInfo($search_by, $order_by, $offset, $limit);
		return $response;
	}

	/**
	 * Operation getBagsWithHttpInfo
	 *
	 * Get catalogs
	 *
	 * @param  string $search_by A search string. You can search the catalogs by their name or the first or last name of the author. (optional)
	 * @param  string $order_by The parameter to order the results by. Order is always ascending. (optional)
	 * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
	 * @param  int $limit The maximum number of items to include in the response (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Synerise\DataManagement\Model\InlineResponse20016, HTTP status code, HTTP response headers (array of strings)
	 */
	public function getBagsWithHttpInfo($search_by = null, $order_by = null, $offset = null, $limit = null)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20016';
		$request = $this->getBagsRequest($search_by, $order_by, $offset, $limit);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->__toString();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse20016',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation getBagsAsync
	 *
	 * Get catalogs
	 *
	 * @param  string $search_by A search string. You can search the catalogs by their name or the first or last name of the author. (optional)
	 * @param  string $order_by The parameter to order the results by. Order is always ascending. (optional)
	 * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
	 * @param  int $limit The maximum number of items to include in the response (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getBagsAsync($search_by = null, $order_by = null, $offset = null, $limit = null)
	{
		return $this->getBagsAsyncWithHttpInfo($search_by, $order_by, $offset, $limit)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation getBagsAsyncWithHttpInfo
	 *
	 * Get catalogs
	 *
	 * @param  string $search_by A search string. You can search the catalogs by their name or the first or last name of the author. (optional)
	 * @param  string $order_by The parameter to order the results by. Order is always ascending. (optional)
	 * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
	 * @param  int $limit The maximum number of items to include in the response (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getBagsAsyncWithHttpInfo($search_by = null, $order_by = null, $offset = null, $limit = null)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20016';
		$request = $this->getBagsRequest($search_by, $order_by, $offset, $limit);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'getBags'
	 *
	 * @param  string $search_by A search string. You can search the catalogs by their name or the first or last name of the author. (optional)
	 * @param  string $order_by The parameter to order the results by. Order is always ascending. (optional)
	 * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
	 * @param  int $limit The maximum number of items to include in the response (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function getBagsRequest($search_by = null, $order_by = null, $offset = null, $limit = null)
	{

		$resourcePath = '/bags';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;

		// query params
		if ($search_by !== null) {
			$queryParams['searchBy'] = ObjectSerializer::toQueryValue($search_by, null);
		}
		// query params
		if ($order_by !== null) {
			$queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by, null);
		}
		// query params
		if ($offset !== null) {
			$queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
		}
		// query params
		if ($limit !== null) {
			$queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
		}


		// body params
		$_tempBody = null;

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json'],
				[]
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'GET',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation getItem
	 *
	 * Get single item by database ID
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#x27;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Synerise\DataManagement\Model\InlineResponse20022
	 */
	public function getItem($catalog_id, $item_id)
	{
		list($response) = $this->getItemWithHttpInfo($catalog_id, $item_id);
		return $response;
	}

	/**
	 * Operation getItemWithHttpInfo
	 *
	 * Get single item by database ID
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#x27;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Synerise\DataManagement\Model\InlineResponse20022, HTTP status code, HTTP response headers (array of strings)
	 */
	public function getItemWithHttpInfo($catalog_id, $item_id)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20022';
		$request = $this->getItemRequest($catalog_id, $item_id);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse20022',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 404:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation getItemAsync
	 *
	 * Get single item by database ID
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#x27;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getItemAsync($catalog_id, $item_id)
	{
		return $this->getItemAsyncWithHttpInfo($catalog_id, $item_id)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation getItemAsyncWithHttpInfo
	 *
	 * Get single item by database ID
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#x27;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getItemAsyncWithHttpInfo($catalog_id, $item_id)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20022';
		$request = $this->getItemRequest($catalog_id, $item_id);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'getItem'
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#x27;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function getItemRequest($catalog_id, $item_id)
	{
		// verify the required parameter 'catalog_id' is set
		if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $catalog_id when calling getItem'
			);
		}
		// verify the required parameter 'item_id' is set
		if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $item_id when calling getItem'
			);
		}

		$resourcePath = '/bags/{catalogId}/items/{itemId}';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;


		// path params
		if ($catalog_id !== null) {
			$resourcePath = str_replace(
				'{' . 'catalogId' . '}',
				ObjectSerializer::toPathValue($catalog_id),
				$resourcePath
			);
		}
		// path params
		if ($item_id !== null) {
			$resourcePath = str_replace(
				'{' . 'itemId' . '}',
				ObjectSerializer::toPathValue($item_id),
				$resourcePath
			);
		}

		// body params
		$_tempBody = null;

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json', 'text/plain']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json', 'text/plain'],
				[]
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'GET',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation getItemDetailByKey
	 *
	 * Get single item by unique key
	 *
	 * @param  string $catalog_name Name of the catalog (required)
	 * @param  string $key Value of the unique identifier of the item in the catalog. When you retrieve an item using [this endpoint](#operation/getItemsByBag), the identifier is in the &#x60;itemKey&#x60; field.  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753,     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;, // this is the value of the key     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053,         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Synerise\DataManagement\Model\InlineResponse20027
	 */
	public function getItemDetailByKey($catalog_name, $key)
	{
		list($response) = $this->getItemDetailByKeyWithHttpInfo($catalog_name, $key);
		return $response;
	}

	/**
	 * Operation getItemDetailByKeyWithHttpInfo
	 *
	 * Get single item by unique key
	 *
	 * @param  string $catalog_name Name of the catalog (required)
	 * @param  string $key Value of the unique identifier of the item in the catalog. When you retrieve an item using [this endpoint](#operation/getItemsByBag), the identifier is in the &#x60;itemKey&#x60; field.  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753,     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;, // this is the value of the key     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053,         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Synerise\DataManagement\Model\InlineResponse20027, HTTP status code, HTTP response headers (array of strings)
	 */
	public function getItemDetailByKeyWithHttpInfo($catalog_name, $key)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20027';
		$request = $this->getItemDetailByKeyRequest($catalog_name, $key);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse20027',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 404:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation getItemDetailByKeyAsync
	 *
	 * Get single item by unique key
	 *
	 * @param  string $catalog_name Name of the catalog (required)
	 * @param  string $key Value of the unique identifier of the item in the catalog. When you retrieve an item using [this endpoint](#operation/getItemsByBag), the identifier is in the &#x60;itemKey&#x60; field.  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753,     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;, // this is the value of the key     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053,         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getItemDetailByKeyAsync($catalog_name, $key)
	{
		return $this->getItemDetailByKeyAsyncWithHttpInfo($catalog_name, $key)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation getItemDetailByKeyAsyncWithHttpInfo
	 *
	 * Get single item by unique key
	 *
	 * @param  string $catalog_name Name of the catalog (required)
	 * @param  string $key Value of the unique identifier of the item in the catalog. When you retrieve an item using [this endpoint](#operation/getItemsByBag), the identifier is in the &#x60;itemKey&#x60; field.  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753,     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;, // this is the value of the key     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053,         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getItemDetailByKeyAsyncWithHttpInfo($catalog_name, $key)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20027';
		$request = $this->getItemDetailByKeyRequest($catalog_name, $key);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'getItemDetailByKey'
	 *
	 * @param  string $catalog_name Name of the catalog (required)
	 * @param  string $key Value of the unique identifier of the item in the catalog. When you retrieve an item using [this endpoint](#operation/getItemsByBag), the identifier is in the &#x60;itemKey&#x60; field.  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753,     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;, // this is the value of the key     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053,         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function getItemDetailByKeyRequest($catalog_name, $key)
	{
		// verify the required parameter 'catalog_name' is set
		if ($catalog_name === null || (is_array($catalog_name) && count($catalog_name) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $catalog_name when calling getItemDetailByKey'
			);
		}
		// verify the required parameter 'key' is set
		if ($key === null || (is_array($key) && count($key) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $key when calling getItemDetailByKey'
			);
		}

		$resourcePath = '/itemDetail';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;

		// query params
		if ($catalog_name !== null) {
			$queryParams['catalogName'] = ObjectSerializer::toQueryValue($catalog_name, null);
		}
		// query params
		if ($key !== null) {
			$queryParams['key'] = ObjectSerializer::toQueryValue($key, null);
		}


		// body params
		$_tempBody = null;

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json', 'text/plain']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json', 'text/plain'],
				[]
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'GET',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation getItemsByBag
	 *
	 * Get items from catalog
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  string $item_key Filter by the value of the unique identifier of the item (exact match) (optional)
	 * @param  string $search_by A search string. The search takes all key values into account. (optional)
	 * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
	 * @param  int $limit The maximum number of items to include in the response (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Synerise\DataManagement\Model\InlineResponse20021
	 */
	public function getItemsByBag($catalog_id, $item_key = null, $search_by = null, $offset = null, $limit = null)
	{
		list($response) = $this->getItemsByBagWithHttpInfo($catalog_id, $item_key, $search_by, $offset, $limit);
		return $response;
	}

	/**
	 * Operation getItemsByBagWithHttpInfo
	 *
	 * Get items from catalog
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  string $item_key Filter by the value of the unique identifier of the item (exact match) (optional)
	 * @param  string $search_by A search string. The search takes all key values into account. (optional)
	 * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
	 * @param  int $limit The maximum number of items to include in the response (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Synerise\DataManagement\Model\InlineResponse20021, HTTP status code, HTTP response headers (array of strings)
	 */
	public function getItemsByBagWithHttpInfo($catalog_id, $item_key = null, $search_by = null, $offset = null, $limit = null)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20021';
		$request = $this->getItemsByBagRequest($catalog_id, $item_key, $search_by, $offset, $limit);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse20021',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation getItemsByBagAsync
	 *
	 * Get items from catalog
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  string $item_key Filter by the value of the unique identifier of the item (exact match) (optional)
	 * @param  string $search_by A search string. The search takes all key values into account. (optional)
	 * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
	 * @param  int $limit The maximum number of items to include in the response (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getItemsByBagAsync($catalog_id, $item_key = null, $search_by = null, $offset = null, $limit = null)
	{
		return $this->getItemsByBagAsyncWithHttpInfo($catalog_id, $item_key, $search_by, $offset, $limit)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation getItemsByBagAsyncWithHttpInfo
	 *
	 * Get items from catalog
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  string $item_key Filter by the value of the unique identifier of the item (exact match) (optional)
	 * @param  string $search_by A search string. The search takes all key values into account. (optional)
	 * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
	 * @param  int $limit The maximum number of items to include in the response (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getItemsByBagAsyncWithHttpInfo($catalog_id, $item_key = null, $search_by = null, $offset = null, $limit = null)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20021';
		$request = $this->getItemsByBagRequest($catalog_id, $item_key, $search_by, $offset, $limit);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'getItemsByBag'
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  string $item_key Filter by the value of the unique identifier of the item (exact match) (optional)
	 * @param  string $search_by A search string. The search takes all key values into account. (optional)
	 * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
	 * @param  int $limit The maximum number of items to include in the response (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function getItemsByBagRequest($catalog_id, $item_key = null, $search_by = null, $offset = null, $limit = null)
	{
		// verify the required parameter 'catalog_id' is set
		if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $catalog_id when calling getItemsByBag'
			);
		}

		$resourcePath = '/bags/{catalogId}/items';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;

		// query params
		if ($item_key !== null) {
			$queryParams['itemKey'] = ObjectSerializer::toQueryValue($item_key, null);
		}
		// query params
		if ($search_by !== null) {
			$queryParams['searchBy'] = ObjectSerializer::toQueryValue($search_by, null);
		}
		// query params
		if ($offset !== null) {
			$queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
		}
		// query params
		if ($limit !== null) {
			$queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
		}

		// path params
		if ($catalog_id !== null) {
			$resourcePath = str_replace(
				'{' . 'catalogId' . '}',
				ObjectSerializer::toPathValue($catalog_id),
				$resourcePath
			);
		}

		// body params
		$_tempBody = null;

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json'],
				[]
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'GET',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation getItemsByBusinessProfileid
	 *
	 * Get all items
	 *
	 * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
	 * @param  int $limit The maximum number of items to include in the response (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Synerise\DataManagement\Model\InlineResponse20021
	 */
	public function getItemsByBusinessProfileid($offset = null, $limit = null)
	{
		list($response) = $this->getItemsByBusinessProfileidWithHttpInfo($offset, $limit);
		return $response;
	}

	/**
	 * Operation getItemsByBusinessProfileidWithHttpInfo
	 *
	 * Get all items
	 *
	 * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
	 * @param  int $limit The maximum number of items to include in the response (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Synerise\DataManagement\Model\InlineResponse20021, HTTP status code, HTTP response headers (array of strings)
	 */
	public function getItemsByBusinessProfileidWithHttpInfo($offset = null, $limit = null)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20021';
		$request = $this->getItemsByBusinessProfileidRequest($offset, $limit);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse20021',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation getItemsByBusinessProfileidAsync
	 *
	 * Get all items
	 *
	 * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
	 * @param  int $limit The maximum number of items to include in the response (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getItemsByBusinessProfileidAsync($offset = null, $limit = null)
	{
		return $this->getItemsByBusinessProfileidAsyncWithHttpInfo($offset, $limit)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation getItemsByBusinessProfileidAsyncWithHttpInfo
	 *
	 * Get all items
	 *
	 * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
	 * @param  int $limit The maximum number of items to include in the response (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getItemsByBusinessProfileidAsyncWithHttpInfo($offset = null, $limit = null)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20021';
		$request = $this->getItemsByBusinessProfileidRequest($offset, $limit);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'getItemsByBusinessProfileid'
	 *
	 * @param  int $offset The offset for the search. For example, if your &#x60;limit&#x60; is 10 and you want to retrieve the third page of items, set the offset to 20. Items with indexes 20 to 29 are returned (the first item on the first page has the index 0). (optional)
	 * @param  int $limit The maximum number of items to include in the response (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function getItemsByBusinessProfileidRequest($offset = null, $limit = null)
	{

		$resourcePath = '/items';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;

		// query params
		if ($offset !== null) {
			$queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
		}
		// query params
		if ($limit !== null) {
			$queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
		}


		// body params
		$_tempBody = null;

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json'],
				[]
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'GET',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation getItemsCSV
	 *
	 * Get all items as CSV file
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return string
	 */
	public function getItemsCSV($catalog_id)
	{
		list($response) = $this->getItemsCSVWithHttpInfo($catalog_id);
		return $response;
	}

	/**
	 * Operation getItemsCSVWithHttpInfo
	 *
	 * Get all items as CSV file
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of string, HTTP status code, HTTP response headers (array of strings)
	 */
	public function getItemsCSVWithHttpInfo($catalog_id)
	{
		$returnType = 'string';
		$request = $this->getItemsCSVRequest($catalog_id);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 404:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation getItemsCSVAsync
	 *
	 * Get all items as CSV file
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getItemsCSVAsync($catalog_id)
	{
		return $this->getItemsCSVAsyncWithHttpInfo($catalog_id)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation getItemsCSVAsyncWithHttpInfo
	 *
	 * Get all items as CSV file
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getItemsCSVAsyncWithHttpInfo($catalog_id)
	{
		$returnType = 'string';
		$request = $this->getItemsCSVRequest($catalog_id);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'getItemsCSV'
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function getItemsCSVRequest($catalog_id)
	{
		// verify the required parameter 'catalog_id' is set
		if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $catalog_id when calling getItemsCSV'
			);
		}

		$resourcePath = '/bags/{catalogId}/csv';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;


		// path params
		if ($catalog_id !== null) {
			$resourcePath = str_replace(
				'{' . 'catalogId' . '}',
				ObjectSerializer::toPathValue($catalog_id),
				$resourcePath
			);
		}

		// body params
		$_tempBody = null;

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['text/csv', 'application/json', 'text/plain']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['text/csv', 'application/json', 'text/plain'],
				[]
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'GET',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation getKeysByBag
	 *
	 * Get catalog keys
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Synerise\DataManagement\Model\InlineResponse20019
	 */
	public function getKeysByBag($catalog_id)
	{
		list($response) = $this->getKeysByBagWithHttpInfo($catalog_id);
		return $response;
	}

	/**
	 * Operation getKeysByBagWithHttpInfo
	 *
	 * Get catalog keys
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Synerise\DataManagement\Model\InlineResponse20019, HTTP status code, HTTP response headers (array of strings)
	 */
	public function getKeysByBagWithHttpInfo($catalog_id)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20019';
		$request = $this->getKeysByBagRequest($catalog_id);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse20019',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 404:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation getKeysByBagAsync
	 *
	 * Get catalog keys
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getKeysByBagAsync($catalog_id)
	{
		return $this->getKeysByBagAsyncWithHttpInfo($catalog_id)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation getKeysByBagAsyncWithHttpInfo
	 *
	 * Get catalog keys
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getKeysByBagAsyncWithHttpInfo($catalog_id)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20019';
		$request = $this->getKeysByBagRequest($catalog_id);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'getKeysByBag'
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function getKeysByBagRequest($catalog_id)
	{
		// verify the required parameter 'catalog_id' is set
		if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $catalog_id when calling getKeysByBag'
			);
		}

		$resourcePath = '/bags/{catalogId}/keys';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;


		// path params
		if ($catalog_id !== null) {
			$resourcePath = str_replace(
				'{' . 'catalogId' . '}',
				ObjectSerializer::toPathValue($catalog_id),
				$resourcePath
			);
		}

		// body params
		$_tempBody = null;

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json', 'text/plain']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json', 'text/plain'],
				[]
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'GET',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation getMappingsByBP
	 *
	 * Get all mappings
	 *
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Synerise\DataManagement\Model\InlineResponse20025
	 */
	public function getMappingsByBP()
	{
		list($response) = $this->getMappingsByBPWithHttpInfo();
		return $response;
	}

	/**
	 * Operation getMappingsByBPWithHttpInfo
	 *
	 * Get all mappings
	 *
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Synerise\DataManagement\Model\InlineResponse20025, HTTP status code, HTTP response headers (array of strings)
	 */
	public function getMappingsByBPWithHttpInfo()
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20025';
		$request = $this->getMappingsByBPRequest();

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse20025',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation getMappingsByBPAsync
	 *
	 * Get all mappings
	 *
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getMappingsByBPAsync()
	{
		return $this->getMappingsByBPAsyncWithHttpInfo()
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation getMappingsByBPAsyncWithHttpInfo
	 *
	 * Get all mappings
	 *
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function getMappingsByBPAsyncWithHttpInfo()
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20025';
		$request = $this->getMappingsByBPRequest();

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'getMappingsByBP'
	 *
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function getMappingsByBPRequest()
	{

		$resourcePath = '/mappings';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;



		// body params
		$_tempBody = null;

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json'],
				[]
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'GET',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation updateItem
	 *
	 * Update single item by database ID
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#x27;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 * @param  object $body JSON object with any number of key/value pairs (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Synerise\DataManagement\Model\InlineResponse20022
	 */
	public function updateItem($catalog_id, $item_id, $body = null)
	{
		list($response) = $this->updateItemWithHttpInfo($catalog_id, $item_id, $body);
		return $response;
	}

	/**
	 * Operation updateItemWithHttpInfo
	 *
	 * Update single item by database ID
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#x27;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 * @param  object $body JSON object with any number of key/value pairs (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Synerise\DataManagement\Model\InlineResponse20022, HTTP status code, HTTP response headers (array of strings)
	 */
	public function updateItemWithHttpInfo($catalog_id, $item_id, $body = null)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20022';
		$request = $this->updateItemRequest($catalog_id, $item_id, $body);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse20022',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 404:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation updateItemAsync
	 *
	 * Update single item by database ID
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#x27;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 * @param  object $body JSON object with any number of key/value pairs (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function updateItemAsync($catalog_id, $item_id, $body = null)
	{
		return $this->updateItemAsyncWithHttpInfo($catalog_id, $item_id, $body)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation updateItemAsyncWithHttpInfo
	 *
	 * Update single item by database ID
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#x27;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 * @param  object $body JSON object with any number of key/value pairs (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function updateItemAsyncWithHttpInfo($catalog_id, $item_id, $body = null)
	{
		$returnType = '\Synerise\DataManagement\Model\InlineResponse20022';
		$request = $this->updateItemRequest($catalog_id, $item_id, $body);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'updateItem'
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  int $item_id ID of the item. This is the ID of the entry in the Synerise database, not the unique identifier that you&#x27;re using in your catalog. The itemId is available in the &#x60;id&#x60; field of the catalog item when you [retrieve items from a catalog](#operation/getItemsByBag):  &#x60;&#x60;&#x60; {     \&quot;creationDate\&quot;: \&quot;2020-09-30T11:31:16.314Z\&quot;,     \&quot;id\&quot;: 73753, // this is the itemId     \&quot;itemKey\&quot;: \&quot;uniqueValue\&quot;,     \&quot;lastModified\&quot;: null,     \&quot;value\&quot;: \&quot;{\\\&quot;exampleKey\\\&quot;:\\\&quot;uniqueValue\\\&quot;,\\\&quot;exampleKey2\\\&quot;:\\\&quot;exampleValue\\\&quot;}\&quot;,     \&quot;bag\&quot;: {         \&quot;author\&quot;: \&quot;authorName\&quot;,         \&quot;creationDate\&quot;: \&quot;2020-09-30T10:52:31.264Z\&quot;,         \&quot;id\&quot;: 1053, // this is the ID of the catalog         \&quot;lastModified\&quot;: \&quot;2020-09-30T11:41:11.808Z\&quot;,         \&quot;name\&quot;: \&quot;sampleCatalog\&quot;     } }, &#x60;&#x60;&#x60; (required)
	 * @param  object $body JSON object with any number of key/value pairs (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function updateItemRequest($catalog_id, $item_id, $body = null)
	{
		// verify the required parameter 'catalog_id' is set
		if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $catalog_id when calling updateItem'
			);
		}
		// verify the required parameter 'item_id' is set
		if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $item_id when calling updateItem'
			);
		}

		$resourcePath = '/bags/{catalogId}/items/{itemId}';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;


		// path params
		if ($catalog_id !== null) {
			$resourcePath = str_replace(
				'{' . 'catalogId' . '}',
				ObjectSerializer::toPathValue($catalog_id),
				$resourcePath
			);
		}
		// path params
		if ($item_id !== null) {
			$resourcePath = str_replace(
				'{' . 'itemId' . '}',
				ObjectSerializer::toPathValue($item_id),
				$resourcePath
			);
		}

		// body params
		$_tempBody = null;
		if (isset($body)) {
			$_tempBody = $body;
		}

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json', 'text/plain']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json', 'text/plain'],
				['application/json']
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'POST',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation uploadItems
	 *
	 * Add items from CSV
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  string $item_key item_key (optional)
	 * @param  string $file file (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return bool
	 */
	public function uploadItems($catalog_id, $item_key = null, $file = null)
	{
		list($response) = $this->uploadItemsWithHttpInfo($catalog_id, $item_key, $file);
		return $response;
	}

	/**
	 * Operation uploadItemsWithHttpInfo
	 *
	 * Add items from CSV
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  string $item_key (optional)
	 * @param  string $file (optional)
	 *
	 * @throws \Synerise\DataManagement\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of bool, HTTP status code, HTTP response headers (array of strings)
	 */
	public function uploadItemsWithHttpInfo($catalog_id, $item_key = null, $file = null)
	{
		$returnType = 'bool';
		$request = $this->uploadItemsRequest($catalog_id, $item_key, $file);

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send($request, $options);
			} catch (RequestException $e) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ($statusCode < 200 || $statusCode > 299) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ($returnType === '\SplFileObject') {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if (!in_array($returnType, ['string','integer','bool'])) {
					$content = json_decode($content);
				}
			}

			return [
				ObjectSerializer::deserialize($content, $returnType, []),
				$response->getStatusCode(),
				$response->getHeaders()
			];

		} catch (ApiException $e) {
			switch ($e->getCode()) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'bool',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 400:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 401:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 403:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Synerise\DataManagement\Model\InlineResponse4011',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
				case 404:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'string',
						$e->getResponseHeaders()
					);
					$e->setResponseObject($data);
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation uploadItemsAsync
	 *
	 * Add items from CSV
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  string $item_key (optional)
	 * @param  string $file (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function uploadItemsAsync($catalog_id, $item_key = null, $file = null)
	{
		return $this->uploadItemsAsyncWithHttpInfo($catalog_id, $item_key, $file)
		            ->then(
			            function ($response) {
				            return $response[0];
			            }
		            );
	}

	/**
	 * Operation uploadItemsAsyncWithHttpInfo
	 *
	 * Add items from CSV
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  string $item_key (optional)
	 * @param  string $file (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function uploadItemsAsyncWithHttpInfo($catalog_id, $item_key = null, $file = null)
	{
		$returnType = 'bool';
		$request = $this->uploadItemsRequest($catalog_id, $item_key, $file);

		return $this->client
			->sendAsync($request, $this->createHttpClientOption())
			->then(
				function ($response) use ($returnType) {
					$responseBody = $response->getBody();
					if ($returnType === '\SplFileObject') {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ($returnType !== 'string') {
							$content = json_decode($content);
						}
					}

					return [
						ObjectSerializer::deserialize($content, $returnType, []),
						$response->getStatusCode(),
						$response->getHeaders()
					];
				},
				function ($exception) {
					$response = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'uploadItems'
	 *
	 * @param  int $catalog_id ID of the catalog (required)
	 * @param  string $item_key (optional)
	 * @param  string $file (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function uploadItemsRequest($catalog_id, $item_key = null, $file = null)
	{
		// verify the required parameter 'catalog_id' is set
		if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $catalog_id when calling uploadItems'
			);
		}

		$resourcePath = '/bags/{catalogId}/items/upload';
		$formParams = [];
		$queryParams = [];
		$headerParams = [];
		$httpBody = '';
		$multipart = false;


		// path params
		if ($catalog_id !== null) {
			$resourcePath = str_replace(
				'{' . 'catalogId' . '}',
				ObjectSerializer::toPathValue($catalog_id),
				$resourcePath
			);
		}

		// form params
		if ($item_key !== null) {
			$formParams['itemKey'] = ObjectSerializer::toFormValue($item_key);
		}
		// form params
		if ($file !== null) {
			$multipart = true;
			$formParams['file'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($file), 'rb');
		}
		// body params
		$_tempBody = null;

		if ($multipart) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				['application/json', 'text/plain']
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				['application/json', 'text/plain'],
				['multipart/form-data']
			);
		}

		// for model (json/xml)
		if (isset($_tempBody)) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($httpBody);
			}
		} elseif (count($formParams) > 0) {
			if ($multipart) {
				$multipartContents = [];
				foreach ($formParams as $formParamName => $formParamValue) {
					$multipartContents[] = [
						'name' => $formParamName,
						'contents' => $formParamValue
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream($multipartContents);

			} elseif ($headers['Content-Type'] === 'application/json') {
				$httpBody = \GuzzleHttp\json_encode($formParams);

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
			}
		}

		// // this endpoint requires Bearer token
		if ($this->config->getAccessToken() !== null) {
			$headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
		}

		$defaultHeaders = [];
		if ($this->config->getUserAgent()) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\Query::build($queryParams);
		return new Request(
			'POST',
			$this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
			$headers,
			$httpBody
		);
	}

	/**
	 * Create http client option
	 *
	 * @throws \RuntimeException on file opening failure
	 * @return array of http client options
	 */
	protected function createHttpClientOption()
	{
		$options = [];
		if ($this->config->getDebug()) {
			$options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
			if (!$options[RequestOptions::DEBUG]) {
				throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
			}
		}

		return $options;
	}
}
