<?php
/**
 * SamlConfigurationData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Data Management
 *
 * Welcome to Synerise API Reference! We hope that you'll enjoy your stay here.  If you need help with our services, feel free to contact us at  [support@synerise.com](mailto:support@synerise.com).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: Jul 4, 2022 12:12:40 PM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Synerise\DataManagement\Model;

use \ArrayAccess;
use \Synerise\DataManagement\ObjectSerializer;

/**
 * SamlConfigurationData Class Doc Comment
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SamlConfigurationData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SamlConfigurationData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'certificate' => 'string',
'group_assignment' => '\Synerise\DataManagement\Model\SamlGroupAssignment',
'idp_issuer_uri' => 'string',
'managed_domains_id' => 'int[]',
'max_clock_skew' => 'int',
'mode' => 'string',
'name' => 'string',
'reactivate_users' => 'bool',
'request_binding' => 'string',
'request_signature' => 'bool',
'request_signature_algorithm' => 'string',
'request_signature_validation' => 'string',
'response_signature_algorithm' => 'string',
'response_signature_validation' => 'string',
'saml_email_location' => '\Synerise\DataManagement\Model\SamlEmailLocation',
'service_provider_uri' => 'string',
'sso_endpoint' => 'string',
'unsuspend_users' => 'bool',
'update_existing_users' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'certificate' => null,
'group_assignment' => null,
'idp_issuer_uri' => null,
'managed_domains_id' => 'int64',
'max_clock_skew' => 'int32',
'mode' => null,
'name' => null,
'reactivate_users' => null,
'request_binding' => null,
'request_signature' => null,
'request_signature_algorithm' => null,
'request_signature_validation' => null,
'response_signature_algorithm' => null,
'response_signature_validation' => null,
'saml_email_location' => null,
'service_provider_uri' => null,
'sso_endpoint' => null,
'unsuspend_users' => null,
'update_existing_users' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'certificate' => 'certificate',
'group_assignment' => 'groupAssignment',
'idp_issuer_uri' => 'idpIssuerUri',
'managed_domains_id' => 'managedDomainsId',
'max_clock_skew' => 'maxClockSkew',
'mode' => 'mode',
'name' => 'name',
'reactivate_users' => 'reactivateUsers',
'request_binding' => 'requestBinding',
'request_signature' => 'requestSignature',
'request_signature_algorithm' => 'requestSignatureAlgorithm',
'request_signature_validation' => 'requestSignatureValidation',
'response_signature_algorithm' => 'responseSignatureAlgorithm',
'response_signature_validation' => 'responseSignatureValidation',
'saml_email_location' => 'samlEmailLocation',
'service_provider_uri' => 'serviceProviderUri',
'sso_endpoint' => 'ssoEndpoint',
'unsuspend_users' => 'unsuspendUsers',
'update_existing_users' => 'updateExistingUsers'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'certificate' => 'setCertificate',
'group_assignment' => 'setGroupAssignment',
'idp_issuer_uri' => 'setIdpIssuerUri',
'managed_domains_id' => 'setManagedDomainsId',
'max_clock_skew' => 'setMaxClockSkew',
'mode' => 'setMode',
'name' => 'setName',
'reactivate_users' => 'setReactivateUsers',
'request_binding' => 'setRequestBinding',
'request_signature' => 'setRequestSignature',
'request_signature_algorithm' => 'setRequestSignatureAlgorithm',
'request_signature_validation' => 'setRequestSignatureValidation',
'response_signature_algorithm' => 'setResponseSignatureAlgorithm',
'response_signature_validation' => 'setResponseSignatureValidation',
'saml_email_location' => 'setSamlEmailLocation',
'service_provider_uri' => 'setServiceProviderUri',
'sso_endpoint' => 'setSsoEndpoint',
'unsuspend_users' => 'setUnsuspendUsers',
'update_existing_users' => 'setUpdateExistingUsers'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'certificate' => 'getCertificate',
'group_assignment' => 'getGroupAssignment',
'idp_issuer_uri' => 'getIdpIssuerUri',
'managed_domains_id' => 'getManagedDomainsId',
'max_clock_skew' => 'getMaxClockSkew',
'mode' => 'getMode',
'name' => 'getName',
'reactivate_users' => 'getReactivateUsers',
'request_binding' => 'getRequestBinding',
'request_signature' => 'getRequestSignature',
'request_signature_algorithm' => 'getRequestSignatureAlgorithm',
'request_signature_validation' => 'getRequestSignatureValidation',
'response_signature_algorithm' => 'getResponseSignatureAlgorithm',
'response_signature_validation' => 'getResponseSignatureValidation',
'saml_email_location' => 'getSamlEmailLocation',
'service_provider_uri' => 'getServiceProviderUri',
'sso_endpoint' => 'getSsoEndpoint',
'unsuspend_users' => 'getUnsuspendUsers',
'update_existing_users' => 'getUpdateExistingUsers'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MODE_DISABLED = 'DISABLED';
const MODE_VOLUNTARY = 'VOLUNTARY';
const MODE_OBLIGATORY = 'OBLIGATORY';
const REQUEST_BINDING_HTTP_POST = 'HTTP_POST';
const REQUEST_SIGNATURE_ALGORITHM_SHA256 = 'SHA256';
const REQUEST_SIGNATURE_VALIDATION_RESPONSE = 'RESPONSE';
const REQUEST_SIGNATURE_VALIDATION_ASSERTION = 'ASSERTION';
const RESPONSE_SIGNATURE_ALGORITHM_SHA256 = 'SHA256';
const RESPONSE_SIGNATURE_VALIDATION_RESPONSE = 'RESPONSE';
const RESPONSE_SIGNATURE_VALIDATION_ASSERTION = 'ASSERTION';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_DISABLED,
self::MODE_VOLUNTARY,
self::MODE_OBLIGATORY,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestBindingAllowableValues()
    {
        return [
            self::REQUEST_BINDING_HTTP_POST,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestSignatureAlgorithmAllowableValues()
    {
        return [
            self::REQUEST_SIGNATURE_ALGORITHM_SHA256,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestSignatureValidationAllowableValues()
    {
        return [
            self::REQUEST_SIGNATURE_VALIDATION_RESPONSE,
self::REQUEST_SIGNATURE_VALIDATION_ASSERTION,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResponseSignatureAlgorithmAllowableValues()
    {
        return [
            self::RESPONSE_SIGNATURE_ALGORITHM_SHA256,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResponseSignatureValidationAllowableValues()
    {
        return [
            self::RESPONSE_SIGNATURE_VALIDATION_RESPONSE,
self::RESPONSE_SIGNATURE_VALIDATION_ASSERTION,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['certificate'] = isset($data['certificate']) ? $data['certificate'] : null;
        $this->container['group_assignment'] = isset($data['group_assignment']) ? $data['group_assignment'] : null;
        $this->container['idp_issuer_uri'] = isset($data['idp_issuer_uri']) ? $data['idp_issuer_uri'] : null;
        $this->container['managed_domains_id'] = isset($data['managed_domains_id']) ? $data['managed_domains_id'] : null;
        $this->container['max_clock_skew'] = isset($data['max_clock_skew']) ? $data['max_clock_skew'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['reactivate_users'] = isset($data['reactivate_users']) ? $data['reactivate_users'] : null;
        $this->container['request_binding'] = isset($data['request_binding']) ? $data['request_binding'] : null;
        $this->container['request_signature'] = isset($data['request_signature']) ? $data['request_signature'] : null;
        $this->container['request_signature_algorithm'] = isset($data['request_signature_algorithm']) ? $data['request_signature_algorithm'] : null;
        $this->container['request_signature_validation'] = isset($data['request_signature_validation']) ? $data['request_signature_validation'] : null;
        $this->container['response_signature_algorithm'] = isset($data['response_signature_algorithm']) ? $data['response_signature_algorithm'] : null;
        $this->container['response_signature_validation'] = isset($data['response_signature_validation']) ? $data['response_signature_validation'] : null;
        $this->container['saml_email_location'] = isset($data['saml_email_location']) ? $data['saml_email_location'] : null;
        $this->container['service_provider_uri'] = isset($data['service_provider_uri']) ? $data['service_provider_uri'] : null;
        $this->container['sso_endpoint'] = isset($data['sso_endpoint']) ? $data['sso_endpoint'] : null;
        $this->container['unsuspend_users'] = isset($data['unsuspend_users']) ? $data['unsuspend_users'] : null;
        $this->container['update_existing_users'] = isset($data['update_existing_users']) ? $data['update_existing_users'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRequestBindingAllowableValues();
        if (!is_null($this->container['request_binding']) && !in_array($this->container['request_binding'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'request_binding', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRequestSignatureAlgorithmAllowableValues();
        if (!is_null($this->container['request_signature_algorithm']) && !in_array($this->container['request_signature_algorithm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'request_signature_algorithm', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRequestSignatureValidationAllowableValues();
        if (!is_null($this->container['request_signature_validation']) && !in_array($this->container['request_signature_validation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'request_signature_validation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResponseSignatureAlgorithmAllowableValues();
        if (!is_null($this->container['response_signature_algorithm']) && !in_array($this->container['response_signature_algorithm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'response_signature_algorithm', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResponseSignatureValidationAllowableValues();
        if (!is_null($this->container['response_signature_validation']) && !in_array($this->container['response_signature_validation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'response_signature_validation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets certificate
     *
     * @return string
     */
    public function getCertificate()
    {
        return $this->container['certificate'];
    }

    /**
     * Sets certificate
     *
     * @param string $certificate certificate
     *
     * @return $this
     */
    public function setCertificate($certificate)
    {
        $this->container['certificate'] = $certificate;

        return $this;
    }

    /**
     * Gets group_assignment
     *
     * @return \Synerise\DataManagement\Model\SamlGroupAssignment
     */
    public function getGroupAssignment()
    {
        return $this->container['group_assignment'];
    }

    /**
     * Sets group_assignment
     *
     * @param \Synerise\DataManagement\Model\SamlGroupAssignment $group_assignment group_assignment
     *
     * @return $this
     */
    public function setGroupAssignment($group_assignment)
    {
        $this->container['group_assignment'] = $group_assignment;

        return $this;
    }

    /**
     * Gets idp_issuer_uri
     *
     * @return string
     */
    public function getIdpIssuerUri()
    {
        return $this->container['idp_issuer_uri'];
    }

    /**
     * Sets idp_issuer_uri
     *
     * @param string $idp_issuer_uri idp_issuer_uri
     *
     * @return $this
     */
    public function setIdpIssuerUri($idp_issuer_uri)
    {
        $this->container['idp_issuer_uri'] = $idp_issuer_uri;

        return $this;
    }

    /**
     * Gets managed_domains_id
     *
     * @return int[]
     */
    public function getManagedDomainsId()
    {
        return $this->container['managed_domains_id'];
    }

    /**
     * Sets managed_domains_id
     *
     * @param int[] $managed_domains_id managed_domains_id
     *
     * @return $this
     */
    public function setManagedDomainsId($managed_domains_id)
    {
        $this->container['managed_domains_id'] = $managed_domains_id;

        return $this;
    }

    /**
     * Gets max_clock_skew
     *
     * @return int
     */
    public function getMaxClockSkew()
    {
        return $this->container['max_clock_skew'];
    }

    /**
     * Sets max_clock_skew
     *
     * @param int $max_clock_skew max_clock_skew
     *
     * @return $this
     */
    public function setMaxClockSkew($max_clock_skew)
    {
        $this->container['max_clock_skew'] = $max_clock_skew;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode mode
     *
     * @return $this
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets reactivate_users
     *
     * @return bool
     */
    public function getReactivateUsers()
    {
        return $this->container['reactivate_users'];
    }

    /**
     * Sets reactivate_users
     *
     * @param bool $reactivate_users reactivate_users
     *
     * @return $this
     */
    public function setReactivateUsers($reactivate_users)
    {
        $this->container['reactivate_users'] = $reactivate_users;

        return $this;
    }

    /**
     * Gets request_binding
     *
     * @return string
     */
    public function getRequestBinding()
    {
        return $this->container['request_binding'];
    }

    /**
     * Sets request_binding
     *
     * @param string $request_binding request_binding
     *
     * @return $this
     */
    public function setRequestBinding($request_binding)
    {
        $allowedValues = $this->getRequestBindingAllowableValues();
        if (!is_null($request_binding) && !in_array($request_binding, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'request_binding', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['request_binding'] = $request_binding;

        return $this;
    }

    /**
     * Gets request_signature
     *
     * @return bool
     */
    public function getRequestSignature()
    {
        return $this->container['request_signature'];
    }

    /**
     * Sets request_signature
     *
     * @param bool $request_signature request_signature
     *
     * @return $this
     */
    public function setRequestSignature($request_signature)
    {
        $this->container['request_signature'] = $request_signature;

        return $this;
    }

    /**
     * Gets request_signature_algorithm
     *
     * @return string
     */
    public function getRequestSignatureAlgorithm()
    {
        return $this->container['request_signature_algorithm'];
    }

    /**
     * Sets request_signature_algorithm
     *
     * @param string $request_signature_algorithm request_signature_algorithm
     *
     * @return $this
     */
    public function setRequestSignatureAlgorithm($request_signature_algorithm)
    {
        $allowedValues = $this->getRequestSignatureAlgorithmAllowableValues();
        if (!is_null($request_signature_algorithm) && !in_array($request_signature_algorithm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'request_signature_algorithm', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['request_signature_algorithm'] = $request_signature_algorithm;

        return $this;
    }

    /**
     * Gets request_signature_validation
     *
     * @return string
     */
    public function getRequestSignatureValidation()
    {
        return $this->container['request_signature_validation'];
    }

    /**
     * Sets request_signature_validation
     *
     * @param string $request_signature_validation request_signature_validation
     *
     * @return $this
     */
    public function setRequestSignatureValidation($request_signature_validation)
    {
        $allowedValues = $this->getRequestSignatureValidationAllowableValues();
        if (!is_null($request_signature_validation) && !in_array($request_signature_validation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'request_signature_validation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['request_signature_validation'] = $request_signature_validation;

        return $this;
    }

    /**
     * Gets response_signature_algorithm
     *
     * @return string
     */
    public function getResponseSignatureAlgorithm()
    {
        return $this->container['response_signature_algorithm'];
    }

    /**
     * Sets response_signature_algorithm
     *
     * @param string $response_signature_algorithm response_signature_algorithm
     *
     * @return $this
     */
    public function setResponseSignatureAlgorithm($response_signature_algorithm)
    {
        $allowedValues = $this->getResponseSignatureAlgorithmAllowableValues();
        if (!is_null($response_signature_algorithm) && !in_array($response_signature_algorithm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'response_signature_algorithm', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['response_signature_algorithm'] = $response_signature_algorithm;

        return $this;
    }

    /**
     * Gets response_signature_validation
     *
     * @return string
     */
    public function getResponseSignatureValidation()
    {
        return $this->container['response_signature_validation'];
    }

    /**
     * Sets response_signature_validation
     *
     * @param string $response_signature_validation response_signature_validation
     *
     * @return $this
     */
    public function setResponseSignatureValidation($response_signature_validation)
    {
        $allowedValues = $this->getResponseSignatureValidationAllowableValues();
        if (!is_null($response_signature_validation) && !in_array($response_signature_validation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'response_signature_validation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['response_signature_validation'] = $response_signature_validation;

        return $this;
    }

    /**
     * Gets saml_email_location
     *
     * @return \Synerise\DataManagement\Model\SamlEmailLocation
     */
    public function getSamlEmailLocation()
    {
        return $this->container['saml_email_location'];
    }

    /**
     * Sets saml_email_location
     *
     * @param \Synerise\DataManagement\Model\SamlEmailLocation $saml_email_location saml_email_location
     *
     * @return $this
     */
    public function setSamlEmailLocation($saml_email_location)
    {
        $this->container['saml_email_location'] = $saml_email_location;

        return $this;
    }

    /**
     * Gets service_provider_uri
     *
     * @return string
     */
    public function getServiceProviderUri()
    {
        return $this->container['service_provider_uri'];
    }

    /**
     * Sets service_provider_uri
     *
     * @param string $service_provider_uri service_provider_uri
     *
     * @return $this
     */
    public function setServiceProviderUri($service_provider_uri)
    {
        $this->container['service_provider_uri'] = $service_provider_uri;

        return $this;
    }

    /**
     * Gets sso_endpoint
     *
     * @return string
     */
    public function getSsoEndpoint()
    {
        return $this->container['sso_endpoint'];
    }

    /**
     * Sets sso_endpoint
     *
     * @param string $sso_endpoint sso_endpoint
     *
     * @return $this
     */
    public function setSsoEndpoint($sso_endpoint)
    {
        $this->container['sso_endpoint'] = $sso_endpoint;

        return $this;
    }

    /**
     * Gets unsuspend_users
     *
     * @return bool
     */
    public function getUnsuspendUsers()
    {
        return $this->container['unsuspend_users'];
    }

    /**
     * Sets unsuspend_users
     *
     * @param bool $unsuspend_users unsuspend_users
     *
     * @return $this
     */
    public function setUnsuspendUsers($unsuspend_users)
    {
        $this->container['unsuspend_users'] = $unsuspend_users;

        return $this;
    }

    /**
     * Gets update_existing_users
     *
     * @return bool
     */
    public function getUpdateExistingUsers()
    {
        return $this->container['update_existing_users'];
    }

    /**
     * Sets update_existing_users
     *
     * @param bool $update_existing_users update_existing_users
     *
     * @return $this
     */
    public function setUpdateExistingUsers($update_existing_users)
    {
        $this->container['update_existing_users'] = $update_existing_users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
