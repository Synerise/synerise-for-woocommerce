<?php
/**
 * ClientManagementApi
 * PHP version 5
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Data Management
 *
 * Welcome to Synerise API Reference! We hope that you'll enjoy your stay here.  If you need help with our services, feel free to contact us at  [support@synerise.com](mailto:support@synerise.com).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: Jul 4, 2022 12:12:40 PM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Synerise\DataManagement\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Synerise\DataManagement\ApiException;
use Synerise\DataManagement\Configuration;
use Synerise\DataManagement\HeaderSelector;
use Synerise\DataManagement\ObjectSerializer;

/**
 * ClientManagementApi Class Doc Comment
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClientManagementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation autocomplete
     *
     * Get autocomplete suggestions
     *
     * @param  string $field The field to get suggestions from (required)
     * @param  string $prefix Prefix that triggers this autocomplete rule (required)
     * @param  int $limit The maximum number of suggestions to retrieve (optional, default to 10)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20042
     */
    public function autocomplete($field, $prefix, $limit = '10')
    {
        list($response) = $this->autocompleteWithHttpInfo($field, $prefix, $limit);
        return $response;
    }

    /**
     * Operation autocompleteWithHttpInfo
     *
     * Get autocomplete suggestions
     *
     * @param  string $field The field to get suggestions from (required)
     * @param  string $prefix Prefix that triggers this autocomplete rule (required)
     * @param  int $limit The maximum number of suggestions to retrieve (optional, default to 10)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20042, HTTP status code, HTTP response headers (array of strings)
     */
    public function autocompleteWithHttpInfo($field, $prefix, $limit = '10')
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20042';
        $request = $this->autocompleteRequest($field, $prefix, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20042',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation autocompleteAsync
     *
     * Get autocomplete suggestions
     *
     * @param  string $field The field to get suggestions from (required)
     * @param  string $prefix Prefix that triggers this autocomplete rule (required)
     * @param  int $limit The maximum number of suggestions to retrieve (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function autocompleteAsync($field, $prefix, $limit = '10')
    {
        return $this->autocompleteAsyncWithHttpInfo($field, $prefix, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation autocompleteAsyncWithHttpInfo
     *
     * Get autocomplete suggestions
     *
     * @param  string $field The field to get suggestions from (required)
     * @param  string $prefix Prefix that triggers this autocomplete rule (required)
     * @param  int $limit The maximum number of suggestions to retrieve (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function autocompleteAsyncWithHttpInfo($field, $prefix, $limit = '10')
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20042';
        $request = $this->autocompleteRequest($field, $prefix, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'autocomplete'
     *
     * @param  string $field The field to get suggestions from (required)
     * @param  string $prefix Prefix that triggers this autocomplete rule (required)
     * @param  int $limit The maximum number of suggestions to retrieve (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function autocompleteRequest($field, $prefix, $limit = '10')
    {
        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling autocomplete'
            );
        }
        // verify the required parameter 'prefix' is set
        if ($prefix === null || (is_array($prefix) && count($prefix) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prefix when calling autocomplete'
            );
        }

        $resourcePath = '/v1/autocomplete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($field !== null) {
            $queryParams['field'] = ObjectSerializer::toQueryValue($field, null);
        }
        // query params
        if ($prefix !== null) {
            $queryParams['prefix'] = ObjectSerializer::toQueryValue($prefix, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation batchAddOrUpdateClients
     *
     * Batch add or update Clients
     *
     * @param  \Synerise\DataManagement\Model\CompanyclientsBody[] $body body (required)
     * @param  string $accept accept (required)
     * @param  string $api_version api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function batchAddOrUpdateClients($body, $accept, $api_version)
    {
        $this->batchAddOrUpdateClientsWithHttpInfo($body, $accept, $api_version);
    }

    /**
     * Operation batchAddOrUpdateClientsWithHttpInfo
     *
     * Batch add or update Clients
     *
     * @param  \Synerise\DataManagement\Model\CompanyclientsBody[] $body (required)
     * @param  string $accept (required)
     * @param  string $api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchAddOrUpdateClientsWithHttpInfo($body, $accept, $api_version)
    {
        $returnType = '';
        $request = $this->batchAddOrUpdateClientsRequest($body, $accept, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [$response->getBody(), $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 207:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse423[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchAddOrUpdateClientsAsync
     *
     * Batch add or update Clients
     *
     * @param  \Synerise\DataManagement\Model\CompanyclientsBody[] $body (required)
     * @param  string $accept (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchAddOrUpdateClientsAsync($body, $accept, $api_version)
    {
        return $this->batchAddOrUpdateClientsAsyncWithHttpInfo($body, $accept, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchAddOrUpdateClientsAsyncWithHttpInfo
     *
     * Batch add or update Clients
     *
     * @param  \Synerise\DataManagement\Model\CompanyclientsBody[] $body (required)
     * @param  string $accept (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchAddOrUpdateClientsAsyncWithHttpInfo($body, $accept, $api_version)
    {
        $returnType = '';
        $request = $this->batchAddOrUpdateClientsRequest($body, $accept, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchAddOrUpdateClients'
     *
     * @param  \Synerise\DataManagement\Model\CompanyclientsBody[] $body (required)
     * @param  string $accept (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function batchAddOrUpdateClientsRequest($body, $accept, $api_version)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling batchAddOrUpdateClients'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling batchAddOrUpdateClients'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling batchAddOrUpdateClients'
            );
        }

        $resourcePath = '/clients/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAClientInCrm
     *
     * Create a Client in CRM
     *
     * @param  \Synerise\DataManagement\Model\ClientsBody $body body (required)
     * @param  string $api_version api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createAClientInCrm($body, $api_version)
    {
        $this->createAClientInCrmWithHttpInfo($body, $api_version);
    }

    /**
     * Operation createAClientInCrmWithHttpInfo
     *
     * Create a Client in CRM
     *
     * @param  \Synerise\DataManagement\Model\ClientsBody $body (required)
     * @param  string $api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAClientInCrmWithHttpInfo($body, $api_version)
    {
        $returnType = '';
        $request = $this->createAClientInCrmRequest($body, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAClientInCrmAsync
     *
     * Create a Client in CRM
     *
     * @param  \Synerise\DataManagement\Model\ClientsBody $body (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAClientInCrmAsync($body, $api_version)
    {
        return $this->createAClientInCrmAsyncWithHttpInfo($body, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAClientInCrmAsyncWithHttpInfo
     *
     * Create a Client in CRM
     *
     * @param  \Synerise\DataManagement\Model\ClientsBody $body (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAClientInCrmAsyncWithHttpInfo($body, $api_version)
    {
        $returnType = '';
        $request = $this->createAClientInCrmRequest($body, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAClientInCrm'
     *
     * @param  \Synerise\DataManagement\Model\ClientsBody $body (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAClientInCrmRequest($body, $api_version)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createAClientInCrm'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling createAClientInCrm'
            );
        }

        $resourcePath = '/clients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createACompanyClientInCrm
     *
     * Create a company Client in CRM
     *
     * @param  \Synerise\DataManagement\Model\CompanyclientsBody $body body (required)
     * @param  string $api_version api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createACompanyClientInCrm($body, $api_version)
    {
        $this->createACompanyClientInCrmWithHttpInfo($body, $api_version);
    }

    /**
     * Operation createACompanyClientInCrmWithHttpInfo
     *
     * Create a company Client in CRM
     *
     * @param  \Synerise\DataManagement\Model\CompanyclientsBody $body (required)
     * @param  string $api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createACompanyClientInCrmWithHttpInfo($body, $api_version)
    {
        $returnType = '';
        $request = $this->createACompanyClientInCrmRequest($body, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createACompanyClientInCrmAsync
     *
     * Create a company Client in CRM
     *
     * @param  \Synerise\DataManagement\Model\CompanyclientsBody $body (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createACompanyClientInCrmAsync($body, $api_version)
    {
        return $this->createACompanyClientInCrmAsyncWithHttpInfo($body, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createACompanyClientInCrmAsyncWithHttpInfo
     *
     * Create a company Client in CRM
     *
     * @param  \Synerise\DataManagement\Model\CompanyclientsBody $body (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createACompanyClientInCrmAsyncWithHttpInfo($body, $api_version)
    {
        $returnType = '';
        $request = $this->createACompanyClientInCrmRequest($body, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createACompanyClientInCrm'
     *
     * @param  \Synerise\DataManagement\Model\CompanyclientsBody $body (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createACompanyClientInCrmRequest($body, $api_version)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createACompanyClientInCrm'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling createACompanyClientInCrm'
            );
        }

        $resourcePath = '/company-clients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLocalSegmentation
     *
     * Create local segmentation
     *
     * @param  object $body The body of this request contains a request to the analytics client. (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function createLocalSegmentation($body)
    {
        list($response) = $this->createLocalSegmentationWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createLocalSegmentationWithHttpInfo
     *
     * Create local segmentation
     *
     * @param  object $body The body of this request contains a request to the analytics client. (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLocalSegmentationWithHttpInfo($body)
    {
        $returnType = 'string';
        $request = $this->createLocalSegmentationRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLocalSegmentationAsync
     *
     * Create local segmentation
     *
     * @param  object $body The body of this request contains a request to the analytics client. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLocalSegmentationAsync($body)
    {
        return $this->createLocalSegmentationAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLocalSegmentationAsyncWithHttpInfo
     *
     * Create local segmentation
     *
     * @param  object $body The body of this request contains a request to the analytics client. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLocalSegmentationAsyncWithHttpInfo($body)
    {
        $returnType = 'string';
        $request = $this->createLocalSegmentationRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLocalSegmentation'
     *
     * @param  object $body The body of this request contains a request to the analytics client. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLocalSegmentationRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createLocalSegmentation'
            );
        }

        $resourcePath = '/v1/segmentations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMaterialization
     *
     * Create materialization
     *
     * @param  \Synerise\DataManagement\Model\ClientsListBody $body body (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20043
     */
    public function createMaterialization($body)
    {
        list($response) = $this->createMaterializationWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createMaterializationWithHttpInfo
     *
     * Create materialization
     *
     * @param  \Synerise\DataManagement\Model\ClientsListBody $body (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20043, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMaterializationWithHttpInfo($body)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20043';
        $request = $this->createMaterializationRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20043',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMaterializationAsync
     *
     * Create materialization
     *
     * @param  \Synerise\DataManagement\Model\ClientsListBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMaterializationAsync($body)
    {
        return $this->createMaterializationAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMaterializationAsyncWithHttpInfo
     *
     * Create materialization
     *
     * @param  \Synerise\DataManagement\Model\ClientsListBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMaterializationAsyncWithHttpInfo($body)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20043';
        $request = $this->createMaterializationRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMaterialization'
     *
     * @param  \Synerise\DataManagement\Model\ClientsListBody $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createMaterializationRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createMaterialization'
            );
        }

        $resourcePath = '/v1/clients/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNoteUsingPOST
     *
     * Create a note
     *
     * @param  int $client_id Client ID (required)
     * @param  \Synerise\DataManagement\Model\ByidClientIdBody $body body (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20046
     */
    public function createNoteUsingPOST($client_id, $body = null)
    {
        list($response) = $this->createNoteUsingPOSTWithHttpInfo($client_id, $body);
        return $response;
    }

    /**
     * Operation createNoteUsingPOSTWithHttpInfo
     *
     * Create a note
     *
     * @param  int $client_id Client ID (required)
     * @param  \Synerise\DataManagement\Model\ByidClientIdBody $body (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20046, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNoteUsingPOSTWithHttpInfo($client_id, $body = null)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20046';
        $request = $this->createNoteUsingPOSTRequest($client_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20046',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNoteUsingPOSTAsync
     *
     * Create a note
     *
     * @param  int $client_id Client ID (required)
     * @param  \Synerise\DataManagement\Model\ByidClientIdBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNoteUsingPOSTAsync($client_id, $body = null)
    {
        return $this->createNoteUsingPOSTAsyncWithHttpInfo($client_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNoteUsingPOSTAsyncWithHttpInfo
     *
     * Create a note
     *
     * @param  int $client_id Client ID (required)
     * @param  \Synerise\DataManagement\Model\ByidClientIdBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNoteUsingPOSTAsyncWithHttpInfo($client_id, $body = null)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20046';
        $request = $this->createNoteUsingPOSTRequest($client_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNoteUsingPOST'
     *
     * @param  int $client_id Client ID (required)
     * @param  \Synerise\DataManagement\Model\ByidClientIdBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createNoteUsingPOSTRequest($client_id, $body = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling createNoteUsingPOST'
            );
        }

        $resourcePath = '/by-id/{clientId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAClient
     *
     * Delete a Client
     *
     * @param  int $client_id The ID of the Client profile (required)
     * @param  string $accept accept (required)
     * @param  string $content_type content_type (required)
     * @param  string $api_version api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAClient($client_id, $accept, $content_type, $api_version)
    {
        $this->deleteAClientWithHttpInfo($client_id, $accept, $content_type, $api_version);
    }

    /**
     * Operation deleteAClientWithHttpInfo
     *
     * Delete a Client
     *
     * @param  int $client_id The ID of the Client profile (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAClientWithHttpInfo($client_id, $accept, $content_type, $api_version)
    {
        $returnType = '';
        $request = $this->deleteAClientRequest($client_id, $accept, $content_type, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAClientAsync
     *
     * Delete a Client
     *
     * @param  int $client_id The ID of the Client profile (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAClientAsync($client_id, $accept, $content_type, $api_version)
    {
        return $this->deleteAClientAsyncWithHttpInfo($client_id, $accept, $content_type, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAClientAsyncWithHttpInfo
     *
     * Delete a Client
     *
     * @param  int $client_id The ID of the Client profile (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAClientAsyncWithHttpInfo($client_id, $accept, $content_type, $api_version)
    {
        $returnType = '';
        $request = $this->deleteAClientRequest($client_id, $accept, $content_type, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAClient'
     *
     * @param  int $client_id The ID of the Client profile (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAClientRequest($client_id, $accept, $content_type, $api_version)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling deleteAClient'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling deleteAClient'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling deleteAClient'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling deleteAClient'
            );
        }

        $resourcePath = '/clients/{clientID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientID' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAClientByCustomId
     *
     * Delete a Client (identify by customId)
     *
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     * @param  string $content_type content_type (required)
     * @param  string $api_version api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAClientByCustomId($client_custom_id, $content_type, $api_version)
    {
        $this->deleteAClientByCustomIdWithHttpInfo($client_custom_id, $content_type, $api_version);
    }

    /**
     * Operation deleteAClientByCustomIdWithHttpInfo
     *
     * Delete a Client (identify by customId)
     *
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAClientByCustomIdWithHttpInfo($client_custom_id, $content_type, $api_version)
    {
        $returnType = '';
        $request = $this->deleteAClientByCustomIdRequest($client_custom_id, $content_type, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAClientByCustomIdAsync
     *
     * Delete a Client (identify by customId)
     *
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAClientByCustomIdAsync($client_custom_id, $content_type, $api_version)
    {
        return $this->deleteAClientByCustomIdAsyncWithHttpInfo($client_custom_id, $content_type, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAClientByCustomIdAsyncWithHttpInfo
     *
     * Delete a Client (identify by customId)
     *
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAClientByCustomIdAsyncWithHttpInfo($client_custom_id, $content_type, $api_version)
    {
        $returnType = '';
        $request = $this->deleteAClientByCustomIdRequest($client_custom_id, $content_type, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAClientByCustomId'
     *
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAClientByCustomIdRequest($client_custom_id, $content_type, $api_version)
    {
        // verify the required parameter 'client_custom_id' is set
        if ($client_custom_id === null || (is_array($client_custom_id) && count($client_custom_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_custom_id when calling deleteAClientByCustomId'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling deleteAClientByCustomId'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling deleteAClientByCustomId'
            );
        }

        $resourcePath = '/clients/by-custom-id/{clientCustomID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($client_custom_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientCustomID' . '}',
                ObjectSerializer::toPathValue($client_custom_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteACompanyClient
     *
     * Delete a company Client
     *
     * @param  int $client_id The ID of the Client profile (required)
     * @param  string $accept accept (required)
     * @param  string $content_type content_type (required)
     * @param  string $api_version api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteACompanyClient($client_id, $accept, $content_type, $api_version)
    {
        $this->deleteACompanyClientWithHttpInfo($client_id, $accept, $content_type, $api_version);
    }

    /**
     * Operation deleteACompanyClientWithHttpInfo
     *
     * Delete a company Client
     *
     * @param  int $client_id The ID of the Client profile (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteACompanyClientWithHttpInfo($client_id, $accept, $content_type, $api_version)
    {
        $returnType = '';
        $request = $this->deleteACompanyClientRequest($client_id, $accept, $content_type, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteACompanyClientAsync
     *
     * Delete a company Client
     *
     * @param  int $client_id The ID of the Client profile (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteACompanyClientAsync($client_id, $accept, $content_type, $api_version)
    {
        return $this->deleteACompanyClientAsyncWithHttpInfo($client_id, $accept, $content_type, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteACompanyClientAsyncWithHttpInfo
     *
     * Delete a company Client
     *
     * @param  int $client_id The ID of the Client profile (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteACompanyClientAsyncWithHttpInfo($client_id, $accept, $content_type, $api_version)
    {
        $returnType = '';
        $request = $this->deleteACompanyClientRequest($client_id, $accept, $content_type, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteACompanyClient'
     *
     * @param  int $client_id The ID of the Client profile (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteACompanyClientRequest($client_id, $accept, $content_type, $api_version)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling deleteACompanyClient'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling deleteACompanyClient'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling deleteACompanyClient'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling deleteACompanyClient'
            );
        }

        $resourcePath = '/company-clients/{clientID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientID' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNoteUsingDELETE
     *
     * Delete note
     *
     * @param  int $client_id Client ID (required)
     * @param  string $note_id Note UUID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNoteUsingDELETE($client_id, $note_id)
    {
        $this->deleteNoteUsingDELETEWithHttpInfo($client_id, $note_id);
    }

    /**
     * Operation deleteNoteUsingDELETEWithHttpInfo
     *
     * Delete note
     *
     * @param  int $client_id Client ID (required)
     * @param  string $note_id Note UUID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNoteUsingDELETEWithHttpInfo($client_id, $note_id)
    {
        $returnType = '';
        $request = $this->deleteNoteUsingDELETERequest($client_id, $note_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNoteUsingDELETEAsync
     *
     * Delete note
     *
     * @param  int $client_id Client ID (required)
     * @param  string $note_id Note UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNoteUsingDELETEAsync($client_id, $note_id)
    {
        return $this->deleteNoteUsingDELETEAsyncWithHttpInfo($client_id, $note_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNoteUsingDELETEAsyncWithHttpInfo
     *
     * Delete note
     *
     * @param  int $client_id Client ID (required)
     * @param  string $note_id Note UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNoteUsingDELETEAsyncWithHttpInfo($client_id, $note_id)
    {
        $returnType = '';
        $request = $this->deleteNoteUsingDELETERequest($client_id, $note_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNoteUsingDELETE'
     *
     * @param  int $client_id Client ID (required)
     * @param  string $note_id Note UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteNoteUsingDELETERequest($client_id, $note_id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling deleteNoteUsingDELETE'
            );
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling deleteNoteUsingDELETE'
            );
        }

        $resourcePath = '/by-id/{clientId}/{noteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'noteId' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportInSegmentationUsingPostForHttp
     *
     * Create client export task for segmentation
     *
     * @param  \Synerise\DataManagement\Model\ClientsSegmentationBody $body Segmentation request body (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20038
     */
    public function exportInSegmentationUsingPostForHttp($body)
    {
        list($response) = $this->exportInSegmentationUsingPostForHttpWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation exportInSegmentationUsingPostForHttpWithHttpInfo
     *
     * Create client export task for segmentation
     *
     * @param  \Synerise\DataManagement\Model\ClientsSegmentationBody $body Segmentation request body (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20038, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportInSegmentationUsingPostForHttpWithHttpInfo($body)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20038';
        $request = $this->exportInSegmentationUsingPostForHttpRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20038',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportInSegmentationUsingPostForHttpAsync
     *
     * Create client export task for segmentation
     *
     * @param  \Synerise\DataManagement\Model\ClientsSegmentationBody $body Segmentation request body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportInSegmentationUsingPostForHttpAsync($body)
    {
        return $this->exportInSegmentationUsingPostForHttpAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportInSegmentationUsingPostForHttpAsyncWithHttpInfo
     *
     * Create client export task for segmentation
     *
     * @param  \Synerise\DataManagement\Model\ClientsSegmentationBody $body Segmentation request body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportInSegmentationUsingPostForHttpAsyncWithHttpInfo($body)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20038';
        $request = $this->exportInSegmentationUsingPostForHttpRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportInSegmentationUsingPostForHttp'
     *
     * @param  \Synerise\DataManagement\Model\ClientsSegmentationBody $body Segmentation request body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportInSegmentationUsingPostForHttpRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling exportInSegmentationUsingPostForHttp'
            );
        }

        $resourcePath = '/v2/export/clients/segmentation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findAClient
     *
     * Find a Client
     *
     * @param  string $identifier_type The type of Client identifier to use for the request (required)
     * @param  string $identifier_value The value of the selected identifier (required)
     * @param  string $content_type content_type (required)
     * @param  string $api_version api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20037
     */
    public function findAClient($identifier_type, $identifier_value, $content_type, $api_version)
    {
        list($response) = $this->findAClientWithHttpInfo($identifier_type, $identifier_value, $content_type, $api_version);
        return $response;
    }

    /**
     * Operation findAClientWithHttpInfo
     *
     * Find a Client
     *
     * @param  string $identifier_type The type of Client identifier to use for the request (required)
     * @param  string $identifier_value The value of the selected identifier (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20037, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAClientWithHttpInfo($identifier_type, $identifier_value, $content_type, $api_version)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20037';
        $request = $this->findAClientRequest($identifier_type, $identifier_value, $content_type, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20037',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findAClientAsync
     *
     * Find a Client
     *
     * @param  string $identifier_type The type of Client identifier to use for the request (required)
     * @param  string $identifier_value The value of the selected identifier (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAClientAsync($identifier_type, $identifier_value, $content_type, $api_version)
    {
        return $this->findAClientAsyncWithHttpInfo($identifier_type, $identifier_value, $content_type, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAClientAsyncWithHttpInfo
     *
     * Find a Client
     *
     * @param  string $identifier_type The type of Client identifier to use for the request (required)
     * @param  string $identifier_value The value of the selected identifier (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAClientAsyncWithHttpInfo($identifier_type, $identifier_value, $content_type, $api_version)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20037';
        $request = $this->findAClientRequest($identifier_type, $identifier_value, $content_type, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAClient'
     *
     * @param  string $identifier_type The type of Client identifier to use for the request (required)
     * @param  string $identifier_value The value of the selected identifier (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findAClientRequest($identifier_type, $identifier_value, $content_type, $api_version)
    {
        // verify the required parameter 'identifier_type' is set
        if ($identifier_type === null || (is_array($identifier_type) && count($identifier_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identifier_type when calling findAClient'
            );
        }
        // verify the required parameter 'identifier_value' is set
        if ($identifier_value === null || (is_array($identifier_value) && count($identifier_value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identifier_value when calling findAClient'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling findAClient'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling findAClient'
            );
        }

        $resourcePath = '/clients/{identifierType}/{identifierValue}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($identifier_type !== null) {
            $resourcePath = str_replace(
                '{' . 'identifierType' . '}',
                ObjectSerializer::toPathValue($identifier_type),
                $resourcePath
            );
        }
        // path params
        if ($identifier_value !== null) {
            $resourcePath = str_replace(
                '{' . 'identifierValue' . '}',
                ObjectSerializer::toPathValue($identifier_value),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllNotesUsingGET
     *
     * Get all Client notes
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20046[]
     */
    public function getAllNotesUsingGET($client_id)
    {
        list($response) = $this->getAllNotesUsingGETWithHttpInfo($client_id);
        return $response;
    }

    /**
     * Operation getAllNotesUsingGETWithHttpInfo
     *
     * Get all Client notes
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20046[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllNotesUsingGETWithHttpInfo($client_id)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20046[]';
        $request = $this->getAllNotesUsingGETRequest($client_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20046[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllNotesUsingGETAsync
     *
     * Get all Client notes
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllNotesUsingGETAsync($client_id)
    {
        return $this->getAllNotesUsingGETAsyncWithHttpInfo($client_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllNotesUsingGETAsyncWithHttpInfo
     *
     * Get all Client notes
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllNotesUsingGETAsyncWithHttpInfo($client_id)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20046[]';
        $request = $this->getAllNotesUsingGETRequest($client_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllNotesUsingGET'
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllNotesUsingGETRequest($client_id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling getAllNotesUsingGET'
            );
        }

        $resourcePath = '/by-id/{clientId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClient
     *
     * Get Client details
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20040
     */
    public function getClient($client_id)
    {
        list($response) = $this->getClientWithHttpInfo($client_id);
        return $response;
    }

    /**
     * Operation getClientWithHttpInfo
     *
     * Get Client details
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20040, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClientWithHttpInfo($client_id)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20040';
        $request = $this->getClientRequest($client_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20040',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClientAsync
     *
     * Get Client details
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientAsync($client_id)
    {
        return $this->getClientAsyncWithHttpInfo($client_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClientAsyncWithHttpInfo
     *
     * Get Client details
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientAsyncWithHttpInfo($client_id)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20040';
        $request = $this->getClientRequest($client_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClient'
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getClientRequest($client_id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling getClient'
            );
        }

        $resourcePath = '/v1/clients/{clientId}/contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClientData
     *
     * Get Client data
     *
     * @param  int $client_id The ID of the Client profile (required)
     * @param  string $content_type content_type (required)
     * @param  string $api_version api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20037
     */
    public function getClientData($client_id, $content_type, $api_version)
    {
        list($response) = $this->getClientDataWithHttpInfo($client_id, $content_type, $api_version);
        return $response;
    }

    /**
     * Operation getClientDataWithHttpInfo
     *
     * Get Client data
     *
     * @param  int $client_id The ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20037, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClientDataWithHttpInfo($client_id, $content_type, $api_version)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20037';
        $request = $this->getClientDataRequest($client_id, $content_type, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20037',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClientDataAsync
     *
     * Get Client data
     *
     * @param  int $client_id The ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientDataAsync($client_id, $content_type, $api_version)
    {
        return $this->getClientDataAsyncWithHttpInfo($client_id, $content_type, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClientDataAsyncWithHttpInfo
     *
     * Get Client data
     *
     * @param  int $client_id The ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClientDataAsyncWithHttpInfo($client_id, $content_type, $api_version)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20037';
        $request = $this->getClientDataRequest($client_id, $content_type, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClientData'
     *
     * @param  int $client_id The ID of the Client profile (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getClientDataRequest($client_id, $content_type, $api_version)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling getClientData'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling getClientData'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getClientData'
            );
        }

        $resourcePath = '/clients/{clientID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientID' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyClient
     *
     * Get details of Client identified as company
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20040
     */
    public function getCompanyClient($client_id)
    {
        list($response) = $this->getCompanyClientWithHttpInfo($client_id);
        return $response;
    }

    /**
     * Operation getCompanyClientWithHttpInfo
     *
     * Get details of Client identified as company
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20040, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyClientWithHttpInfo($client_id)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20040';
        $request = $this->getCompanyClientRequest($client_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20040',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyClientAsync
     *
     * Get details of Client identified as company
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyClientAsync($client_id)
    {
        return $this->getCompanyClientAsyncWithHttpInfo($client_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyClientAsyncWithHttpInfo
     *
     * Get details of Client identified as company
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyClientAsyncWithHttpInfo($client_id)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20040';
        $request = $this->getCompanyClientRequest($client_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyClient'
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCompanyClientRequest($client_id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling getCompanyClient'
            );
        }

        $resourcePath = '/v1/company-clients/{clientId}/contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyRelatedToClient
     *
     * Get company related to Client
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getCompanyRelatedToClient($client_id)
    {
        list($response) = $this->getCompanyRelatedToClientWithHttpInfo($client_id);
        return $response;
    }

    /**
     * Operation getCompanyRelatedToClientWithHttpInfo
     *
     * Get company related to Client
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyRelatedToClientWithHttpInfo($client_id)
    {
        $returnType = 'string';
        $request = $this->getCompanyRelatedToClientRequest($client_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyRelatedToClientAsync
     *
     * Get company related to Client
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyRelatedToClientAsync($client_id)
    {
        return $this->getCompanyRelatedToClientAsyncWithHttpInfo($client_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyRelatedToClientAsyncWithHttpInfo
     *
     * Get company related to Client
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyRelatedToClientAsyncWithHttpInfo($client_id)
    {
        $returnType = 'string';
        $request = $this->getCompanyRelatedToClientRequest($client_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyRelatedToClient'
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCompanyRelatedToClientRequest($client_id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling getCompanyRelatedToClient'
            );
        }

        $resourcePath = '/v1/clients/{clientId}/company';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyRelations
     *
     * List Clients of a company
     *
     * @param  int $client_id Client ID (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20041
     */
    public function getCompanyRelations($client_id, $limit = '25', $offset = '0')
    {
        list($response) = $this->getCompanyRelationsWithHttpInfo($client_id, $limit, $offset);
        return $response;
    }

    /**
     * Operation getCompanyRelationsWithHttpInfo
     *
     * List Clients of a company
     *
     * @param  int $client_id Client ID (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20041, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyRelationsWithHttpInfo($client_id, $limit = '25', $offset = '0')
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20041';
        $request = $this->getCompanyRelationsRequest($client_id, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20041',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyRelationsAsync
     *
     * List Clients of a company
     *
     * @param  int $client_id Client ID (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyRelationsAsync($client_id, $limit = '25', $offset = '0')
    {
        return $this->getCompanyRelationsAsyncWithHttpInfo($client_id, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyRelationsAsyncWithHttpInfo
     *
     * List Clients of a company
     *
     * @param  int $client_id Client ID (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyRelationsAsyncWithHttpInfo($client_id, $limit = '25', $offset = '0')
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20041';
        $request = $this->getCompanyRelationsRequest($client_id, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyRelations'
     *
     * @param  int $client_id Client ID (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCompanyRelationsRequest($client_id, $limit = '25', $offset = '0')
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling getCompanyRelations'
            );
        }

        $resourcePath = '/v1/company-clients/{clientId}/relations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }

        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIsClientCompanyIdentifier
     *
     * Gets company identifier attribute
     *
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getIsClientCompanyIdentifier()
    {
        list($response) = $this->getIsClientCompanyIdentifierWithHttpInfo();
        return $response;
    }

    /**
     * Operation getIsClientCompanyIdentifierWithHttpInfo
     *
     * Gets company identifier attribute
     *
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIsClientCompanyIdentifierWithHttpInfo()
    {
        $returnType = 'string';
        $request = $this->getIsClientCompanyIdentifierRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIsClientCompanyIdentifierAsync
     *
     * Gets company identifier attribute
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIsClientCompanyIdentifierAsync()
    {
        return $this->getIsClientCompanyIdentifierAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIsClientCompanyIdentifierAsyncWithHttpInfo
     *
     * Gets company identifier attribute
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIsClientCompanyIdentifierAsyncWithHttpInfo()
    {
        $returnType = 'string';
        $request = $this->getIsClientCompanyIdentifierRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIsClientCompanyIdentifier'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getIsClientCompanyIdentifierRequest()
    {

        $resourcePath = '/v1/company-clients-identifier';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLastActivityDate
     *
     * Get Client last activity date
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20045
     */
    public function getLastActivityDate($client_id)
    {
        list($response) = $this->getLastActivityDateWithHttpInfo($client_id);
        return $response;
    }

    /**
     * Operation getLastActivityDateWithHttpInfo
     *
     * Get Client last activity date
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20045, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLastActivityDateWithHttpInfo($client_id)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20045';
        $request = $this->getLastActivityDateRequest($client_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20045',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLastActivityDateAsync
     *
     * Get Client last activity date
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLastActivityDateAsync($client_id)
    {
        return $this->getLastActivityDateAsyncWithHttpInfo($client_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLastActivityDateAsyncWithHttpInfo
     *
     * Get Client last activity date
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLastActivityDateAsyncWithHttpInfo($client_id)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20045';
        $request = $this->getLastActivityDateRequest($client_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLastActivityDate'
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLastActivityDateRequest($client_id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling getLastActivityDate'
            );
        }

        $resourcePath = '/v1/clients/{clientId}/last-activity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLocalSegmentation
     *
     * Get Clients from local segmentation
     *
     * @param  int $id Local segmentation ID (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $search Filter the results by parameter values. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile.  If you enter a simple string (not a &#x60;field:value&#x60; pattern), the search will take the following parameters into account: email, first name, last name, UUID, custom parameters. (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20041
     */
    public function getLocalSegmentation($id, $limit = '25', $offset = '0', $recognized = 'NONE', $search = null)
    {
        list($response) = $this->getLocalSegmentationWithHttpInfo($id, $limit, $offset, $recognized, $search);
        return $response;
    }

    /**
     * Operation getLocalSegmentationWithHttpInfo
     *
     * Get Clients from local segmentation
     *
     * @param  int $id Local segmentation ID (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $search Filter the results by parameter values. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile.  If you enter a simple string (not a &#x60;field:value&#x60; pattern), the search will take the following parameters into account: email, first name, last name, UUID, custom parameters. (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20041, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLocalSegmentationWithHttpInfo($id, $limit = '25', $offset = '0', $recognized = 'NONE', $search = null)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20041';
        $request = $this->getLocalSegmentationRequest($id, $limit, $offset, $recognized, $search);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20041',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLocalSegmentationAsync
     *
     * Get Clients from local segmentation
     *
     * @param  int $id Local segmentation ID (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $search Filter the results by parameter values. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile.  If you enter a simple string (not a &#x60;field:value&#x60; pattern), the search will take the following parameters into account: email, first name, last name, UUID, custom parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocalSegmentationAsync($id, $limit = '25', $offset = '0', $recognized = 'NONE', $search = null)
    {
        return $this->getLocalSegmentationAsyncWithHttpInfo($id, $limit, $offset, $recognized, $search)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLocalSegmentationAsyncWithHttpInfo
     *
     * Get Clients from local segmentation
     *
     * @param  int $id Local segmentation ID (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $search Filter the results by parameter values. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile.  If you enter a simple string (not a &#x60;field:value&#x60; pattern), the search will take the following parameters into account: email, first name, last name, UUID, custom parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocalSegmentationAsyncWithHttpInfo($id, $limit = '25', $offset = '0', $recognized = 'NONE', $search = null)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20041';
        $request = $this->getLocalSegmentationRequest($id, $limit, $offset, $recognized, $search);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLocalSegmentation'
     *
     * @param  int $id Local segmentation ID (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $search Filter the results by parameter values. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile.  If you enter a simple string (not a &#x60;field:value&#x60; pattern), the search will take the following parameters into account: email, first name, last name, UUID, custom parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLocalSegmentationRequest($id, $limit = '25', $offset = '0', $recognized = 'NONE', $search = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getLocalSegmentation'
            );
        }

        $resourcePath = '/v1/segmentations/local/{ID}/clients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($recognized !== null) {
            $queryParams['recognized'] = ObjectSerializer::toQueryValue($recognized, null);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search, null);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'ID' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNoteUsingGET
     *
     * Get note
     *
     * @param  int $client_id Client ID (required)
     * @param  string $note_id Note UUID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20046
     */
    public function getNoteUsingGET($client_id, $note_id)
    {
        list($response) = $this->getNoteUsingGETWithHttpInfo($client_id, $note_id);
        return $response;
    }

    /**
     * Operation getNoteUsingGETWithHttpInfo
     *
     * Get note
     *
     * @param  int $client_id Client ID (required)
     * @param  string $note_id Note UUID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20046, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNoteUsingGETWithHttpInfo($client_id, $note_id)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20046';
        $request = $this->getNoteUsingGETRequest($client_id, $note_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20046',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNoteUsingGETAsync
     *
     * Get note
     *
     * @param  int $client_id Client ID (required)
     * @param  string $note_id Note UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNoteUsingGETAsync($client_id, $note_id)
    {
        return $this->getNoteUsingGETAsyncWithHttpInfo($client_id, $note_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNoteUsingGETAsyncWithHttpInfo
     *
     * Get note
     *
     * @param  int $client_id Client ID (required)
     * @param  string $note_id Note UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNoteUsingGETAsyncWithHttpInfo($client_id, $note_id)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20046';
        $request = $this->getNoteUsingGETRequest($client_id, $note_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNoteUsingGET'
     *
     * @param  int $client_id Client ID (required)
     * @param  string $note_id Note UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNoteUsingGETRequest($client_id, $note_id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling getNoteUsingGET'
            );
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling getNoteUsingGET'
            );
        }

        $resourcePath = '/by-id/{clientId}/{noteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'noteId' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResultsByTaskId
     *
     * Retrieve export data
     *
     * @param  int $task_id The ID of the export task to retrieve the results from (required)
     * @param  int $limit The limit of results retrieved. Used for pagination. (optional)
     * @param  int $offset The index of the first result to retrieve. The first result has the index &#x60;0&#x60;. Used for pagination. (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20039[]
     */
    public function getResultsByTaskId($task_id, $limit = null, $offset = null)
    {
        list($response) = $this->getResultsByTaskIdWithHttpInfo($task_id, $limit, $offset);
        return $response;
    }

    /**
     * Operation getResultsByTaskIdWithHttpInfo
     *
     * Retrieve export data
     *
     * @param  int $task_id The ID of the export task to retrieve the results from (required)
     * @param  int $limit The limit of results retrieved. Used for pagination. (optional)
     * @param  int $offset The index of the first result to retrieve. The first result has the index &#x60;0&#x60;. Used for pagination. (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20039[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getResultsByTaskIdWithHttpInfo($task_id, $limit = null, $offset = null)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20039[]';
        $request = $this->getResultsByTaskIdRequest($task_id, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20039[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getResultsByTaskIdAsync
     *
     * Retrieve export data
     *
     * @param  int $task_id The ID of the export task to retrieve the results from (required)
     * @param  int $limit The limit of results retrieved. Used for pagination. (optional)
     * @param  int $offset The index of the first result to retrieve. The first result has the index &#x60;0&#x60;. Used for pagination. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResultsByTaskIdAsync($task_id, $limit = null, $offset = null)
    {
        return $this->getResultsByTaskIdAsyncWithHttpInfo($task_id, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResultsByTaskIdAsyncWithHttpInfo
     *
     * Retrieve export data
     *
     * @param  int $task_id The ID of the export task to retrieve the results from (required)
     * @param  int $limit The limit of results retrieved. Used for pagination. (optional)
     * @param  int $offset The index of the first result to retrieve. The first result has the index &#x60;0&#x60;. Used for pagination. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResultsByTaskIdAsyncWithHttpInfo($task_id, $limit = null, $offset = null)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20039[]';
        $request = $this->getResultsByTaskIdRequest($task_id, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResultsByTaskId'
     *
     * @param  int $task_id The ID of the export task to retrieve the results from (required)
     * @param  int $limit The limit of results retrieved. Used for pagination. (optional)
     * @param  int $offset The index of the first result to retrieve. The first result has the index &#x60;0&#x60;. Used for pagination. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getResultsByTaskIdRequest($task_id, $limit = null, $offset = null)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null || (is_array($task_id) && count($task_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling getResultsByTaskId'
            );
        }

        $resourcePath = '/v2/export/clients/task/{taskId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSegmentation
     *
     * Get customers from segmentation
     *
     * @param  string $uuid UUID of the segmentation (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $search Filter the results by parameter values. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile.  If you enter a simple string (not a &#x60;field:value&#x60; pattern), the search will take the following parameters into account: email, first name, last name, UUID, custom parameters. (optional)
     * @param  string $sort_by Choose a parameter to sort the results. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile. &#x60;orderType&#x60; can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20041
     */
    public function getSegmentation($uuid, $limit = '25', $offset = '0', $recognized = 'NONE', $search = null, $sort_by = null)
    {
        list($response) = $this->getSegmentationWithHttpInfo($uuid, $limit, $offset, $recognized, $search, $sort_by);
        return $response;
    }

    /**
     * Operation getSegmentationWithHttpInfo
     *
     * Get customers from segmentation
     *
     * @param  string $uuid UUID of the segmentation (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $search Filter the results by parameter values. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile.  If you enter a simple string (not a &#x60;field:value&#x60; pattern), the search will take the following parameters into account: email, first name, last name, UUID, custom parameters. (optional)
     * @param  string $sort_by Choose a parameter to sort the results. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile. &#x60;orderType&#x60; can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20041, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSegmentationWithHttpInfo($uuid, $limit = '25', $offset = '0', $recognized = 'NONE', $search = null, $sort_by = null)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20041';
        $request = $this->getSegmentationRequest($uuid, $limit, $offset, $recognized, $search, $sort_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20041',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSegmentationAsync
     *
     * Get customers from segmentation
     *
     * @param  string $uuid UUID of the segmentation (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $search Filter the results by parameter values. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile.  If you enter a simple string (not a &#x60;field:value&#x60; pattern), the search will take the following parameters into account: email, first name, last name, UUID, custom parameters. (optional)
     * @param  string $sort_by Choose a parameter to sort the results. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile. &#x60;orderType&#x60; can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSegmentationAsync($uuid, $limit = '25', $offset = '0', $recognized = 'NONE', $search = null, $sort_by = null)
    {
        return $this->getSegmentationAsyncWithHttpInfo($uuid, $limit, $offset, $recognized, $search, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSegmentationAsyncWithHttpInfo
     *
     * Get customers from segmentation
     *
     * @param  string $uuid UUID of the segmentation (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $search Filter the results by parameter values. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile.  If you enter a simple string (not a &#x60;field:value&#x60; pattern), the search will take the following parameters into account: email, first name, last name, UUID, custom parameters. (optional)
     * @param  string $sort_by Choose a parameter to sort the results. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile. &#x60;orderType&#x60; can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSegmentationAsyncWithHttpInfo($uuid, $limit = '25', $offset = '0', $recognized = 'NONE', $search = null, $sort_by = null)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20041';
        $request = $this->getSegmentationRequest($uuid, $limit, $offset, $recognized, $search, $sort_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSegmentation'
     *
     * @param  string $uuid UUID of the segmentation (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $search Filter the results by parameter values. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile.  If you enter a simple string (not a &#x60;field:value&#x60; pattern), the search will take the following parameters into account: email, first name, last name, UUID, custom parameters. (optional)
     * @param  string $sort_by Choose a parameter to sort the results. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile. &#x60;orderType&#x60; can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSegmentationRequest($uuid, $limit = '25', $offset = '0', $recognized = 'NONE', $search = null, $sort_by = null)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getSegmentation'
            );
        }

        $resourcePath = '/v1/segmentations/{UUID}/clients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($recognized !== null) {
            $queryParams['recognized'] = ObjectSerializer::toQueryValue($recognized, null);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search, null);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by, null);
        }

        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'UUID' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation identifyClientAsCompany
     *
     * Identify Client as a company
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20040
     */
    public function identifyClientAsCompany($client_id)
    {
        list($response) = $this->identifyClientAsCompanyWithHttpInfo($client_id);
        return $response;
    }

    /**
     * Operation identifyClientAsCompanyWithHttpInfo
     *
     * Identify Client as a company
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20040, HTTP status code, HTTP response headers (array of strings)
     */
    public function identifyClientAsCompanyWithHttpInfo($client_id)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20040';
        $request = $this->identifyClientAsCompanyRequest($client_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20040',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation identifyClientAsCompanyAsync
     *
     * Identify Client as a company
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function identifyClientAsCompanyAsync($client_id)
    {
        return $this->identifyClientAsCompanyAsyncWithHttpInfo($client_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation identifyClientAsCompanyAsyncWithHttpInfo
     *
     * Identify Client as a company
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function identifyClientAsCompanyAsyncWithHttpInfo($client_id)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20040';
        $request = $this->identifyClientAsCompanyRequest($client_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'identifyClientAsCompany'
     *
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function identifyClientAsCompanyRequest($client_id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling identifyClientAsCompany'
            );
        }

        $resourcePath = '/v1/company-clients/{clientId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listClients
     *
     * List Clients
     *
     * @param  string $content_type content_type (required)
     * @param  string $api_version api_version (required)
     * @param  string $sort_by Client attribute by which the list will be sorted (optional)
     * @param  string $sort_order Sorting order (optional)
     * @param  int $page_index Number of pages to retrieve (optional)
     * @param  int $page_size Number of entries on a page (optional)
     * @param  bool $filters_anonymous When set to &#x60;true&#x60;, only anonymous clients are listed (optional)
     * @param  string $filters_first_name Filter Clients by first name (optional)
     * @param  string $filters_last_name Filter Clients by last name (optional)
     * @param  string $filters_email Filter Clients by city (optional)
     * @param  string $filters_phone Filter Clients by phone (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20036[]
     */
    public function listClients($content_type, $api_version, $sort_by = null, $sort_order = null, $page_index = null, $page_size = null, $filters_anonymous = null, $filters_first_name = null, $filters_last_name = null, $filters_email = null, $filters_phone = null)
    {
        list($response) = $this->listClientsWithHttpInfo($content_type, $api_version, $sort_by, $sort_order, $page_index, $page_size, $filters_anonymous, $filters_first_name, $filters_last_name, $filters_email, $filters_phone);
        return $response;
    }

    /**
     * Operation listClientsWithHttpInfo
     *
     * List Clients
     *
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  string $sort_by Client attribute by which the list will be sorted (optional)
     * @param  string $sort_order Sorting order (optional)
     * @param  int $page_index Number of pages to retrieve (optional)
     * @param  int $page_size Number of entries on a page (optional)
     * @param  bool $filters_anonymous When set to &#x60;true&#x60;, only anonymous clients are listed (optional)
     * @param  string $filters_first_name Filter Clients by first name (optional)
     * @param  string $filters_last_name Filter Clients by last name (optional)
     * @param  string $filters_email Filter Clients by city (optional)
     * @param  string $filters_phone Filter Clients by phone (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20036[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listClientsWithHttpInfo($content_type, $api_version, $sort_by = null, $sort_order = null, $page_index = null, $page_size = null, $filters_anonymous = null, $filters_first_name = null, $filters_last_name = null, $filters_email = null, $filters_phone = null)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20036[]';
        $request = $this->listClientsRequest($content_type, $api_version, $sort_by, $sort_order, $page_index, $page_size, $filters_anonymous, $filters_first_name, $filters_last_name, $filters_email, $filters_phone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20036[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listClientsAsync
     *
     * List Clients
     *
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  string $sort_by Client attribute by which the list will be sorted (optional)
     * @param  string $sort_order Sorting order (optional)
     * @param  int $page_index Number of pages to retrieve (optional)
     * @param  int $page_size Number of entries on a page (optional)
     * @param  bool $filters_anonymous When set to &#x60;true&#x60;, only anonymous clients are listed (optional)
     * @param  string $filters_first_name Filter Clients by first name (optional)
     * @param  string $filters_last_name Filter Clients by last name (optional)
     * @param  string $filters_email Filter Clients by city (optional)
     * @param  string $filters_phone Filter Clients by phone (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listClientsAsync($content_type, $api_version, $sort_by = null, $sort_order = null, $page_index = null, $page_size = null, $filters_anonymous = null, $filters_first_name = null, $filters_last_name = null, $filters_email = null, $filters_phone = null)
    {
        return $this->listClientsAsyncWithHttpInfo($content_type, $api_version, $sort_by, $sort_order, $page_index, $page_size, $filters_anonymous, $filters_first_name, $filters_last_name, $filters_email, $filters_phone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listClientsAsyncWithHttpInfo
     *
     * List Clients
     *
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  string $sort_by Client attribute by which the list will be sorted (optional)
     * @param  string $sort_order Sorting order (optional)
     * @param  int $page_index Number of pages to retrieve (optional)
     * @param  int $page_size Number of entries on a page (optional)
     * @param  bool $filters_anonymous When set to &#x60;true&#x60;, only anonymous clients are listed (optional)
     * @param  string $filters_first_name Filter Clients by first name (optional)
     * @param  string $filters_last_name Filter Clients by last name (optional)
     * @param  string $filters_email Filter Clients by city (optional)
     * @param  string $filters_phone Filter Clients by phone (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listClientsAsyncWithHttpInfo($content_type, $api_version, $sort_by = null, $sort_order = null, $page_index = null, $page_size = null, $filters_anonymous = null, $filters_first_name = null, $filters_last_name = null, $filters_email = null, $filters_phone = null)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20036[]';
        $request = $this->listClientsRequest($content_type, $api_version, $sort_by, $sort_order, $page_index, $page_size, $filters_anonymous, $filters_first_name, $filters_last_name, $filters_email, $filters_phone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listClients'
     *
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     * @param  string $sort_by Client attribute by which the list will be sorted (optional)
     * @param  string $sort_order Sorting order (optional)
     * @param  int $page_index Number of pages to retrieve (optional)
     * @param  int $page_size Number of entries on a page (optional)
     * @param  bool $filters_anonymous When set to &#x60;true&#x60;, only anonymous clients are listed (optional)
     * @param  string $filters_first_name Filter Clients by first name (optional)
     * @param  string $filters_last_name Filter Clients by last name (optional)
     * @param  string $filters_email Filter Clients by city (optional)
     * @param  string $filters_phone Filter Clients by phone (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listClientsRequest($content_type, $api_version, $sort_by = null, $sort_order = null, $page_index = null, $page_size = null, $filters_anonymous = null, $filters_first_name = null, $filters_last_name = null, $filters_email = null, $filters_phone = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling listClients'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling listClients'
            );
        }

        $resourcePath = '/clients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by, null);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sort_order, null);
        }
        // query params
        if ($page_index !== null) {
            $queryParams['pageIndex'] = ObjectSerializer::toQueryValue($page_index, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }
        // query params
        if ($filters_anonymous !== null) {
            $queryParams['filters[anonymous]'] = ObjectSerializer::toQueryValue($filters_anonymous, null);
        }
        // query params
        if ($filters_first_name !== null) {
            $queryParams['filters[firstName]'] = ObjectSerializer::toQueryValue($filters_first_name, null);
        }
        // query params
        if ($filters_last_name !== null) {
            $queryParams['filters[lastName]'] = ObjectSerializer::toQueryValue($filters_last_name, null);
        }
        // query params
        if ($filters_email !== null) {
            $queryParams['filters[email]'] = ObjectSerializer::toQueryValue($filters_email, null);
        }
        // query params
        if ($filters_phone !== null) {
            $queryParams['filters[phone]'] = ObjectSerializer::toQueryValue($filters_phone, null);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listClientsMaterialization
     *
     * List Clients from a materialization
     *
     * @param  int $materialization_id ID of the materialization (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20044
     */
    public function listClientsMaterialization($materialization_id, $limit = '25', $offset = '0')
    {
        list($response) = $this->listClientsMaterializationWithHttpInfo($materialization_id, $limit, $offset);
        return $response;
    }

    /**
     * Operation listClientsMaterializationWithHttpInfo
     *
     * List Clients from a materialization
     *
     * @param  int $materialization_id ID of the materialization (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20044, HTTP status code, HTTP response headers (array of strings)
     */
    public function listClientsMaterializationWithHttpInfo($materialization_id, $limit = '25', $offset = '0')
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20044';
        $request = $this->listClientsMaterializationRequest($materialization_id, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20044',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listClientsMaterializationAsync
     *
     * List Clients from a materialization
     *
     * @param  int $materialization_id ID of the materialization (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listClientsMaterializationAsync($materialization_id, $limit = '25', $offset = '0')
    {
        return $this->listClientsMaterializationAsyncWithHttpInfo($materialization_id, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listClientsMaterializationAsyncWithHttpInfo
     *
     * List Clients from a materialization
     *
     * @param  int $materialization_id ID of the materialization (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listClientsMaterializationAsyncWithHttpInfo($materialization_id, $limit = '25', $offset = '0')
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20044';
        $request = $this->listClientsMaterializationRequest($materialization_id, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listClientsMaterialization'
     *
     * @param  int $materialization_id ID of the materialization (required)
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listClientsMaterializationRequest($materialization_id, $limit = '25', $offset = '0')
    {
        // verify the required parameter 'materialization_id' is set
        if ($materialization_id === null || (is_array($materialization_id) && count($materialization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $materialization_id when calling listClientsMaterialization'
            );
        }

        $resourcePath = '/v1/clients/list/{materializationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }

        // path params
        if ($materialization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'materializationId' . '}',
                ObjectSerializer::toPathValue($materialization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listClients_0
     *
     * List Clients
     *
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $search Filter the results by parameter values. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile.  If you enter a simple string (not a &#x60;field:value&#x60; pattern), the search will take the following parameters into account: email, first name, last name, UUID, custom parameters. (optional)
     * @param  string $sort_by Choose a parameter to sort the results. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile. &#x60;orderType&#x60; can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20041
     */
    public function listClients_0($limit = '25', $offset = '0', $recognized = 'NONE', $search = null, $sort_by = null)
    {
        list($response) = $this->listClients_0WithHttpInfo($limit, $offset, $recognized, $search, $sort_by);
        return $response;
    }

    /**
     * Operation listClients_0WithHttpInfo
     *
     * List Clients
     *
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $search Filter the results by parameter values. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile.  If you enter a simple string (not a &#x60;field:value&#x60; pattern), the search will take the following parameters into account: email, first name, last name, UUID, custom parameters. (optional)
     * @param  string $sort_by Choose a parameter to sort the results. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile. &#x60;orderType&#x60; can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20041, HTTP status code, HTTP response headers (array of strings)
     */
    public function listClients_0WithHttpInfo($limit = '25', $offset = '0', $recognized = 'NONE', $search = null, $sort_by = null)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20041';
        $request = $this->listClients_0Request($limit, $offset, $recognized, $search, $sort_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20041',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listClients_0Async
     *
     * List Clients
     *
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $search Filter the results by parameter values. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile.  If you enter a simple string (not a &#x60;field:value&#x60; pattern), the search will take the following parameters into account: email, first name, last name, UUID, custom parameters. (optional)
     * @param  string $sort_by Choose a parameter to sort the results. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile. &#x60;orderType&#x60; can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listClients_0Async($limit = '25', $offset = '0', $recognized = 'NONE', $search = null, $sort_by = null)
    {
        return $this->listClients_0AsyncWithHttpInfo($limit, $offset, $recognized, $search, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listClients_0AsyncWithHttpInfo
     *
     * List Clients
     *
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $search Filter the results by parameter values. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile.  If you enter a simple string (not a &#x60;field:value&#x60; pattern), the search will take the following parameters into account: email, first name, last name, UUID, custom parameters. (optional)
     * @param  string $sort_by Choose a parameter to sort the results. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile. &#x60;orderType&#x60; can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listClients_0AsyncWithHttpInfo($limit = '25', $offset = '0', $recognized = 'NONE', $search = null, $sort_by = null)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20041';
        $request = $this->listClients_0Request($limit, $offset, $recognized, $search, $sort_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listClients_0'
     *
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $search Filter the results by parameter values. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile.  If you enter a simple string (not a &#x60;field:value&#x60; pattern), the search will take the following parameters into account: email, first name, last name, UUID, custom parameters. (optional)
     * @param  string $sort_by Choose a parameter to sort the results. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile. &#x60;orderType&#x60; can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listClients_0Request($limit = '25', $offset = '0', $recognized = 'NONE', $search = null, $sort_by = null)
    {

        $resourcePath = '/v1/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($recognized !== null) {
            $queryParams['recognized'] = ObjectSerializer::toQueryValue($recognized, null);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search, null);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCompanyClients
     *
     * List Clients identified as companies
     *
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $sort_by Choose a parameter to sort the results. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile. &#x60;orderType&#x60; can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20041
     */
    public function listCompanyClients($limit = '25', $offset = '0', $recognized = 'NONE', $sort_by = null)
    {
        list($response) = $this->listCompanyClientsWithHttpInfo($limit, $offset, $recognized, $sort_by);
        return $response;
    }

    /**
     * Operation listCompanyClientsWithHttpInfo
     *
     * List Clients identified as companies
     *
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $sort_by Choose a parameter to sort the results. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile. &#x60;orderType&#x60; can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20041, HTTP status code, HTTP response headers (array of strings)
     */
    public function listCompanyClientsWithHttpInfo($limit = '25', $offset = '0', $recognized = 'NONE', $sort_by = null)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20041';
        $request = $this->listCompanyClientsRequest($limit, $offset, $recognized, $sort_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20041',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listCompanyClientsAsync
     *
     * List Clients identified as companies
     *
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $sort_by Choose a parameter to sort the results. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile. &#x60;orderType&#x60; can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCompanyClientsAsync($limit = '25', $offset = '0', $recognized = 'NONE', $sort_by = null)
    {
        return $this->listCompanyClientsAsyncWithHttpInfo($limit, $offset, $recognized, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCompanyClientsAsyncWithHttpInfo
     *
     * List Clients identified as companies
     *
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $sort_by Choose a parameter to sort the results. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile. &#x60;orderType&#x60; can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCompanyClientsAsyncWithHttpInfo($limit = '25', $offset = '0', $recognized = 'NONE', $sort_by = null)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20041';
        $request = $this->listCompanyClientsRequest($limit, $offset, $recognized, $sort_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCompanyClients'
     *
     * @param  int $limit The maximum number of items to retrieve. This can be used for pagination. (optional, default to 25)
     * @param  int $offset The ID of the first item to retrieve. This is used for pagination. For example, to retrieve items starting at number 11, set offset to 10. (optional, default to 0)
     * @param  string $recognized Filter the results by Client&#x27;s anonymity status. &#x60;true&#x60; is the same as &#x60;RECOGNIZED&#x60;. &#x60;false&#x60; is the same as &#x60;ANONYMOUS&#x60;. When set to &#x60;NONE&#x60;, no filter is applied. (optional, default to NONE)
     * @param  string $sort_by Choose a parameter to sort the results. &#x60;field&#x60; is the name of a field in the customer&#x27;s profile. &#x60;orderType&#x60; can be &#x60;ASC&#x60; or &#x60;DESC&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listCompanyClientsRequest($limit = '25', $offset = '0', $recognized = 'NONE', $sort_by = null)
    {

        $resourcePath = '/v1/company-clients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($recognized !== null) {
            $queryParams['recognized'] = ObjectSerializer::toQueryValue($recognized, null);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation logoutClientUsingPOST
     *
     * Log out a Client
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  \Synerise\DataManagement\Model\ClientIDLogoutBody $body body (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function logoutClientUsingPOST($client_id, $body = null)
    {
        $this->logoutClientUsingPOSTWithHttpInfo($client_id, $body);
    }

    /**
     * Operation logoutClientUsingPOSTWithHttpInfo
     *
     * Log out a Client
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  \Synerise\DataManagement\Model\ClientIDLogoutBody $body (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function logoutClientUsingPOSTWithHttpInfo($client_id, $body = null)
    {
        $returnType = '';
        $request = $this->logoutClientUsingPOSTRequest($client_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation logoutClientUsingPOSTAsync
     *
     * Log out a Client
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  \Synerise\DataManagement\Model\ClientIDLogoutBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function logoutClientUsingPOSTAsync($client_id, $body = null)
    {
        return $this->logoutClientUsingPOSTAsyncWithHttpInfo($client_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation logoutClientUsingPOSTAsyncWithHttpInfo
     *
     * Log out a Client
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  \Synerise\DataManagement\Model\ClientIDLogoutBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function logoutClientUsingPOSTAsyncWithHttpInfo($client_id, $body = null)
    {
        $returnType = '';
        $request = $this->logoutClientUsingPOSTRequest($client_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'logoutClientUsingPOST'
     *
     * @param  string $client_id The ID of the Client profile (required)
     * @param  \Synerise\DataManagement\Model\ClientIDLogoutBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function logoutClientUsingPOSTRequest($client_id, $body = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling logoutClientUsingPOST'
            );
        }

        $resourcePath = '/management/client/{clientID}/logout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientID' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeClientsByCustomId
     *
     * Merge Clients by custom ID
     *
     * @param  string $source_custom_i_ds Comma-delimited string with custom IDs of the Client&#x27;s profiles to merge (required)
     * @param  string $target_custom_id The custom ID of the Client profile to merge the &#x60;sourceCustomIDs&#x60; into (required)
     * @param  string $accept accept (required)
     * @param  string $content_type content_type (required)
     * @param  string $api_version api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function mergeClientsByCustomId($source_custom_i_ds, $target_custom_id, $accept, $content_type, $api_version)
    {
        $this->mergeClientsByCustomIdWithHttpInfo($source_custom_i_ds, $target_custom_id, $accept, $content_type, $api_version);
    }

    /**
     * Operation mergeClientsByCustomIdWithHttpInfo
     *
     * Merge Clients by custom ID
     *
     * @param  string $source_custom_i_ds Comma-delimited string with custom IDs of the Client&#x27;s profiles to merge (required)
     * @param  string $target_custom_id The custom ID of the Client profile to merge the &#x60;sourceCustomIDs&#x60; into (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeClientsByCustomIdWithHttpInfo($source_custom_i_ds, $target_custom_id, $accept, $content_type, $api_version)
    {
        $returnType = '';
        $request = $this->mergeClientsByCustomIdRequest($source_custom_i_ds, $target_custom_id, $accept, $content_type, $api_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeClientsByCustomIdAsync
     *
     * Merge Clients by custom ID
     *
     * @param  string $source_custom_i_ds Comma-delimited string with custom IDs of the Client&#x27;s profiles to merge (required)
     * @param  string $target_custom_id The custom ID of the Client profile to merge the &#x60;sourceCustomIDs&#x60; into (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeClientsByCustomIdAsync($source_custom_i_ds, $target_custom_id, $accept, $content_type, $api_version)
    {
        return $this->mergeClientsByCustomIdAsyncWithHttpInfo($source_custom_i_ds, $target_custom_id, $accept, $content_type, $api_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeClientsByCustomIdAsyncWithHttpInfo
     *
     * Merge Clients by custom ID
     *
     * @param  string $source_custom_i_ds Comma-delimited string with custom IDs of the Client&#x27;s profiles to merge (required)
     * @param  string $target_custom_id The custom ID of the Client profile to merge the &#x60;sourceCustomIDs&#x60; into (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeClientsByCustomIdAsyncWithHttpInfo($source_custom_i_ds, $target_custom_id, $accept, $content_type, $api_version)
    {
        $returnType = '';
        $request = $this->mergeClientsByCustomIdRequest($source_custom_i_ds, $target_custom_id, $accept, $content_type, $api_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeClientsByCustomId'
     *
     * @param  string $source_custom_i_ds Comma-delimited string with custom IDs of the Client&#x27;s profiles to merge (required)
     * @param  string $target_custom_id The custom ID of the Client profile to merge the &#x60;sourceCustomIDs&#x60; into (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $api_version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeClientsByCustomIdRequest($source_custom_i_ds, $target_custom_id, $accept, $content_type, $api_version)
    {
        // verify the required parameter 'source_custom_i_ds' is set
        if ($source_custom_i_ds === null || (is_array($source_custom_i_ds) && count($source_custom_i_ds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_custom_i_ds when calling mergeClientsByCustomId'
            );
        }
        // verify the required parameter 'target_custom_id' is set
        if ($target_custom_id === null || (is_array($target_custom_id) && count($target_custom_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_custom_id when calling mergeClientsByCustomId'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling mergeClientsByCustomId'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling mergeClientsByCustomId'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling mergeClientsByCustomId'
            );
        }

        $resourcePath = '/clients/merge/from/custom-ids/{sourceCustomIDs}/to/custom-id/{targetCustomID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($source_custom_i_ds !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceCustomIDs' . '}',
                ObjectSerializer::toPathValue($source_custom_i_ds),
                $resourcePath
            );
        }
        // path params
        if ($target_custom_id !== null) {
            $resourcePath = str_replace(
                '{' . 'targetCustomID' . '}',
                ObjectSerializer::toPathValue($target_custom_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAClient
     *
     * Update a Client (identify by ID)
     *
     * @param  \Synerise\DataManagement\Model\ClientsClientIDBody $body body (required)
     * @param  string $api_version api_version (required)
     * @param  int $client_id The ID of the Client profile (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateAClient($body, $api_version, $client_id)
    {
        $this->updateAClientWithHttpInfo($body, $api_version, $client_id);
    }

    /**
     * Operation updateAClientWithHttpInfo
     *
     * Update a Client (identify by ID)
     *
     * @param  \Synerise\DataManagement\Model\ClientsClientIDBody $body (required)
     * @param  string $api_version (required)
     * @param  int $client_id The ID of the Client profile (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAClientWithHttpInfo($body, $api_version, $client_id)
    {
        $returnType = '';
        $request = $this->updateAClientRequest($body, $api_version, $client_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAClientAsync
     *
     * Update a Client (identify by ID)
     *
     * @param  \Synerise\DataManagement\Model\ClientsClientIDBody $body (required)
     * @param  string $api_version (required)
     * @param  int $client_id The ID of the Client profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAClientAsync($body, $api_version, $client_id)
    {
        return $this->updateAClientAsyncWithHttpInfo($body, $api_version, $client_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAClientAsyncWithHttpInfo
     *
     * Update a Client (identify by ID)
     *
     * @param  \Synerise\DataManagement\Model\ClientsClientIDBody $body (required)
     * @param  string $api_version (required)
     * @param  int $client_id The ID of the Client profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAClientAsyncWithHttpInfo($body, $api_version, $client_id)
    {
        $returnType = '';
        $request = $this->updateAClientRequest($body, $api_version, $client_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAClient'
     *
     * @param  \Synerise\DataManagement\Model\ClientsClientIDBody $body (required)
     * @param  string $api_version (required)
     * @param  int $client_id The ID of the Client profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAClientRequest($body, $api_version, $client_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateAClient'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling updateAClient'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling updateAClient'
            );
        }

        $resourcePath = '/clients/{clientID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientID' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAClientByCustomId
     *
     * Update a Client (identify by customId)
     *
     * @param  \Synerise\DataManagement\Model\BycustomidClientCustomIDBody $body body (required)
     * @param  string $api_version api_version (required)
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateAClientByCustomId($body, $api_version, $client_custom_id)
    {
        $this->updateAClientByCustomIdWithHttpInfo($body, $api_version, $client_custom_id);
    }

    /**
     * Operation updateAClientByCustomIdWithHttpInfo
     *
     * Update a Client (identify by customId)
     *
     * @param  \Synerise\DataManagement\Model\BycustomidClientCustomIDBody $body (required)
     * @param  string $api_version (required)
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAClientByCustomIdWithHttpInfo($body, $api_version, $client_custom_id)
    {
        $returnType = '';
        $request = $this->updateAClientByCustomIdRequest($body, $api_version, $client_custom_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAClientByCustomIdAsync
     *
     * Update a Client (identify by customId)
     *
     * @param  \Synerise\DataManagement\Model\BycustomidClientCustomIDBody $body (required)
     * @param  string $api_version (required)
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAClientByCustomIdAsync($body, $api_version, $client_custom_id)
    {
        return $this->updateAClientByCustomIdAsyncWithHttpInfo($body, $api_version, $client_custom_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAClientByCustomIdAsyncWithHttpInfo
     *
     * Update a Client (identify by customId)
     *
     * @param  \Synerise\DataManagement\Model\BycustomidClientCustomIDBody $body (required)
     * @param  string $api_version (required)
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAClientByCustomIdAsyncWithHttpInfo($body, $api_version, $client_custom_id)
    {
        $returnType = '';
        $request = $this->updateAClientByCustomIdRequest($body, $api_version, $client_custom_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAClientByCustomId'
     *
     * @param  \Synerise\DataManagement\Model\BycustomidClientCustomIDBody $body (required)
     * @param  string $api_version (required)
     * @param  string $client_custom_id The custom ID of the Client profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAClientByCustomIdRequest($body, $api_version, $client_custom_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateAClientByCustomId'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling updateAClientByCustomId'
            );
        }
        // verify the required parameter 'client_custom_id' is set
        if ($client_custom_id === null || (is_array($client_custom_id) && count($client_custom_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_custom_id when calling updateAClientByCustomId'
            );
        }

        $resourcePath = '/clients/by-customid/{clientCustomID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($client_custom_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientCustomID' . '}',
                ObjectSerializer::toPathValue($client_custom_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAClientByEmail
     *
     * Update a Client (identify by email)
     *
     * @param  \Synerise\DataManagement\Model\ByemailClientEmailBody $body body (required)
     * @param  string $api_version api_version (required)
     * @param  string $client_email The Client&#x27;s email address (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateAClientByEmail($body, $api_version, $client_email)
    {
        $this->updateAClientByEmailWithHttpInfo($body, $api_version, $client_email);
    }

    /**
     * Operation updateAClientByEmailWithHttpInfo
     *
     * Update a Client (identify by email)
     *
     * @param  \Synerise\DataManagement\Model\ByemailClientEmailBody $body (required)
     * @param  string $api_version (required)
     * @param  string $client_email The Client&#x27;s email address (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAClientByEmailWithHttpInfo($body, $api_version, $client_email)
    {
        $returnType = '';
        $request = $this->updateAClientByEmailRequest($body, $api_version, $client_email);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse4001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAClientByEmailAsync
     *
     * Update a Client (identify by email)
     *
     * @param  \Synerise\DataManagement\Model\ByemailClientEmailBody $body (required)
     * @param  string $api_version (required)
     * @param  string $client_email The Client&#x27;s email address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAClientByEmailAsync($body, $api_version, $client_email)
    {
        return $this->updateAClientByEmailAsyncWithHttpInfo($body, $api_version, $client_email)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAClientByEmailAsyncWithHttpInfo
     *
     * Update a Client (identify by email)
     *
     * @param  \Synerise\DataManagement\Model\ByemailClientEmailBody $body (required)
     * @param  string $api_version (required)
     * @param  string $client_email The Client&#x27;s email address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAClientByEmailAsyncWithHttpInfo($body, $api_version, $client_email)
    {
        $returnType = '';
        $request = $this->updateAClientByEmailRequest($body, $api_version, $client_email);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAClientByEmail'
     *
     * @param  \Synerise\DataManagement\Model\ByemailClientEmailBody $body (required)
     * @param  string $api_version (required)
     * @param  string $client_email The Client&#x27;s email address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAClientByEmailRequest($body, $api_version, $client_email)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateAClientByEmail'
            );
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling updateAClientByEmail'
            );
        }
        // verify the required parameter 'client_email' is set
        if ($client_email === null || (is_array($client_email) && count($client_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_email when calling updateAClientByEmail'
            );
        }

        $resourcePath = '/clients/by-email/{clientEmail}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }

        // path params
        if ($client_email !== null) {
            $resourcePath = str_replace(
                '{' . 'clientEmail' . '}',
                ObjectSerializer::toPathValue($client_email),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateClient
     *
     * Update Client
     *
     * @param  \Synerise\DataManagement\Model\ContactsClientIdBody $body body (required)
     * @param  int $client_id Client ID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20040
     */
    public function updateClient($body, $client_id)
    {
        list($response) = $this->updateClientWithHttpInfo($body, $client_id);
        return $response;
    }

    /**
     * Operation updateClientWithHttpInfo
     *
     * Update Client
     *
     * @param  \Synerise\DataManagement\Model\ContactsClientIdBody $body (required)
     * @param  int $client_id Client ID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20040, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateClientWithHttpInfo($body, $client_id)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20040';
        $request = $this->updateClientRequest($body, $client_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20040',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateClientAsync
     *
     * Update Client
     *
     * @param  \Synerise\DataManagement\Model\ContactsClientIdBody $body (required)
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateClientAsync($body, $client_id)
    {
        return $this->updateClientAsyncWithHttpInfo($body, $client_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateClientAsyncWithHttpInfo
     *
     * Update Client
     *
     * @param  \Synerise\DataManagement\Model\ContactsClientIdBody $body (required)
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateClientAsyncWithHttpInfo($body, $client_id)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20040';
        $request = $this->updateClientRequest($body, $client_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateClient'
     *
     * @param  \Synerise\DataManagement\Model\ContactsClientIdBody $body (required)
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateClientRequest($body, $client_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateClient'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling updateClient'
            );
        }

        $resourcePath = '/v1/contacts/{clientId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCompanyClient
     *
     * Update Client identified as company
     *
     * @param  \Synerise\DataManagement\Model\CompanyclientsClientIdBody $body body (required)
     * @param  int $client_id Client ID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20040
     */
    public function updateCompanyClient($body, $client_id)
    {
        list($response) = $this->updateCompanyClientWithHttpInfo($body, $client_id);
        return $response;
    }

    /**
     * Operation updateCompanyClientWithHttpInfo
     *
     * Update Client identified as company
     *
     * @param  \Synerise\DataManagement\Model\CompanyclientsClientIdBody $body (required)
     * @param  int $client_id Client ID (required)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20040, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCompanyClientWithHttpInfo($body, $client_id)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20040';
        $request = $this->updateCompanyClientRequest($body, $client_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20040',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCompanyClientAsync
     *
     * Update Client identified as company
     *
     * @param  \Synerise\DataManagement\Model\CompanyclientsClientIdBody $body (required)
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCompanyClientAsync($body, $client_id)
    {
        return $this->updateCompanyClientAsyncWithHttpInfo($body, $client_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCompanyClientAsyncWithHttpInfo
     *
     * Update Client identified as company
     *
     * @param  \Synerise\DataManagement\Model\CompanyclientsClientIdBody $body (required)
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCompanyClientAsyncWithHttpInfo($body, $client_id)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20040';
        $request = $this->updateCompanyClientRequest($body, $client_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCompanyClient'
     *
     * @param  \Synerise\DataManagement\Model\CompanyclientsClientIdBody $body (required)
     * @param  int $client_id Client ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCompanyClientRequest($body, $client_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateCompanyClient'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling updateCompanyClient'
            );
        }

        $resourcePath = '/v1/company-clients/{clientId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNoteUsingPUT
     *
     * Update note
     *
     * @param  int $client_id Client ID (required)
     * @param  string $note_id Note UUID (required)
     * @param  \Synerise\DataManagement\Model\ClientIdNoteIdBody $body body (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Synerise\DataManagement\Model\InlineResponse20046
     */
    public function updateNoteUsingPUT($client_id, $note_id, $body = null)
    {
        list($response) = $this->updateNoteUsingPUTWithHttpInfo($client_id, $note_id, $body);
        return $response;
    }

    /**
     * Operation updateNoteUsingPUTWithHttpInfo
     *
     * Update note
     *
     * @param  int $client_id Client ID (required)
     * @param  string $note_id Note UUID (required)
     * @param  \Synerise\DataManagement\Model\ClientIdNoteIdBody $body (optional)
     *
     * @throws \Synerise\DataManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Synerise\DataManagement\Model\InlineResponse20046, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNoteUsingPUTWithHttpInfo($client_id, $note_id, $body = null)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20046';
        $request = $this->updateNoteUsingPUTRequest($client_id, $note_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Synerise\DataManagement\Model\InlineResponse20046',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNoteUsingPUTAsync
     *
     * Update note
     *
     * @param  int $client_id Client ID (required)
     * @param  string $note_id Note UUID (required)
     * @param  \Synerise\DataManagement\Model\ClientIdNoteIdBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNoteUsingPUTAsync($client_id, $note_id, $body = null)
    {
        return $this->updateNoteUsingPUTAsyncWithHttpInfo($client_id, $note_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNoteUsingPUTAsyncWithHttpInfo
     *
     * Update note
     *
     * @param  int $client_id Client ID (required)
     * @param  string $note_id Note UUID (required)
     * @param  \Synerise\DataManagement\Model\ClientIdNoteIdBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNoteUsingPUTAsyncWithHttpInfo($client_id, $note_id, $body = null)
    {
        $returnType = '\Synerise\DataManagement\Model\InlineResponse20046';
        $request = $this->updateNoteUsingPUTRequest($client_id, $note_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNoteUsingPUT'
     *
     * @param  int $client_id Client ID (required)
     * @param  string $note_id Note UUID (required)
     * @param  \Synerise\DataManagement\Model\ClientIdNoteIdBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateNoteUsingPUTRequest($client_id, $note_id, $body = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling updateNoteUsingPUT'
            );
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling updateNoteUsingPUT'
            );
        }

        $resourcePath = '/by-id/{clientId}/{noteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'noteId' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
