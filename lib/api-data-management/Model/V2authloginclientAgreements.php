<?php
/**
 * V2authloginclientAgreements
 *
 * PHP version 5
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Data Management
 *
 * Welcome to Synerise API Reference! We hope that you'll enjoy your stay here.  If you need help with our services, feel free to contact us at  [support@synerise.com](mailto:support@synerise.com).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: Jul 4, 2022 12:12:40 PM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Synerise\DataManagement\Model;

use \ArrayAccess;
use \Synerise\DataManagement\ObjectSerializer;

/**
 * V2authloginclientAgreements Class Doc Comment
 *
 * @category Class
 * @description This object contains the marketing agreements of the Client.  You can also pass the values as strings (&#x60;\&quot;true\&quot;&#x60;;&#x60;\&quot;TRUE\&quot;&#x60;;&#x60;\&quot;True\&quot;&#x60;/&#x60;\&quot;false\&quot;&#x60;;&#x60;\&quot;FALSE\&quot;&#x60;;&#x60;\&quot;False\&quot;&#x60;) or integers (&#x60;1&#x60; for true and &#x60;0&#x60; for false).
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V2authloginclientAgreements implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v2authloginclient_agreements';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'email' => 'bool',
'sms' => 'bool',
'push' => 'bool',
'webpush' => 'bool',
'bluetooth' => 'bool',
'rfid' => 'bool',
'wifi' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'email' => null,
'sms' => null,
'push' => null,
'webpush' => null,
'bluetooth' => null,
'rfid' => null,
'wifi' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
'sms' => 'sms',
'push' => 'push',
'webpush' => 'webpush',
'bluetooth' => 'bluetooth',
'rfid' => 'rfid',
'wifi' => 'wifi'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
'sms' => 'setSms',
'push' => 'setPush',
'webpush' => 'setWebpush',
'bluetooth' => 'setBluetooth',
'rfid' => 'setRfid',
'wifi' => 'setWifi'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
'sms' => 'getSms',
'push' => 'getPush',
'webpush' => 'getWebpush',
'bluetooth' => 'getBluetooth',
'rfid' => 'getRfid',
'wifi' => 'getWifi'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email'] = isset($data['email']) ? $data['email'] : false;
        $this->container['sms'] = isset($data['sms']) ? $data['sms'] : false;
        $this->container['push'] = isset($data['push']) ? $data['push'] : false;
        $this->container['webpush'] = isset($data['webpush']) ? $data['webpush'] : false;
        $this->container['bluetooth'] = isset($data['bluetooth']) ? $data['bluetooth'] : false;
        $this->container['rfid'] = isset($data['rfid']) ? $data['rfid'] : false;
        $this->container['wifi'] = isset($data['wifi']) ? $data['wifi'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return bool
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param bool $email Permission to receive marketing information by e-mail
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets sms
     *
     * @return bool
     */
    public function getSms()
    {
        return $this->container['sms'];
    }

    /**
     * Sets sms
     *
     * @param bool $sms Permission to receive marketing information by SMS
     *
     * @return $this
     */
    public function setSms($sms)
    {
        $this->container['sms'] = $sms;

        return $this;
    }

    /**
     * Gets push
     *
     * @return bool
     */
    public function getPush()
    {
        return $this->container['push'];
    }

    /**
     * Sets push
     *
     * @param bool $push Permission to receive push notifications
     *
     * @return $this
     */
    public function setPush($push)
    {
        $this->container['push'] = $push;

        return $this;
    }

    /**
     * Gets webpush
     *
     * @return bool
     */
    public function getWebpush()
    {
        return $this->container['webpush'];
    }

    /**
     * Sets webpush
     *
     * @param bool $webpush Permission to receive webpush notifications
     *
     * @return $this
     */
    public function setWebpush($webpush)
    {
        $this->container['webpush'] = $webpush;

        return $this;
    }

    /**
     * Gets bluetooth
     *
     * @return bool
     */
    public function getBluetooth()
    {
        return $this->container['bluetooth'];
    }

    /**
     * Sets bluetooth
     *
     * @param bool $bluetooth Permission to use Bluetooth data for marketing purposes
     *
     * @return $this
     */
    public function setBluetooth($bluetooth)
    {
        $this->container['bluetooth'] = $bluetooth;

        return $this;
    }

    /**
     * Gets rfid
     *
     * @return bool
     */
    public function getRfid()
    {
        return $this->container['rfid'];
    }

    /**
     * Sets rfid
     *
     * @param bool $rfid Permission to use RFID for marketing purposes
     *
     * @return $this
     */
    public function setRfid($rfid)
    {
        $this->container['rfid'] = $rfid;

        return $this;
    }

    /**
     * Gets wifi
     *
     * @return bool
     */
    public function getWifi()
    {
        return $this->container['wifi'];
    }

    /**
     * Sets wifi
     *
     * @param bool $wifi Permission to use WiFi for marketing purposes
     *
     * @return $this
     */
    public function setWifi($wifi)
    {
        $this->container['wifi'] = $wifi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
