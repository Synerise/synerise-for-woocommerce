<?php
/**
 * TableDisplay
 *
 * PHP version 5
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Data Management
 *
 * Welcome to Synerise API Reference! We hope that you'll enjoy your stay here.  If you need help with our services, feel free to contact us at  [support@synerise.com](mailto:support@synerise.com).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: Jul 4, 2022 12:12:40 PM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Synerise\DataManagement\Model;

use \ArrayAccess;
use \Synerise\DataManagement\ObjectSerializer;

/**
 * TableDisplay Class Doc Comment
 *
 * @category Class
 * @description Table display configuration
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TableDisplay implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Table display';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'custom_css_class' => 'string',
'is_striped' => 'bool',
'is_bordered' => 'bool',
'is_hover' => 'bool',
'is_condensed' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'custom_css_class' => null,
'is_striped' => null,
'is_bordered' => null,
'is_hover' => null,
'is_condensed' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'custom_css_class' => 'customCssClass',
'is_striped' => 'isStriped',
'is_bordered' => 'isBordered',
'is_hover' => 'isHover',
'is_condensed' => 'isCondensed'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'custom_css_class' => 'setCustomCssClass',
'is_striped' => 'setIsStriped',
'is_bordered' => 'setIsBordered',
'is_hover' => 'setIsHover',
'is_condensed' => 'setIsCondensed'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'custom_css_class' => 'getCustomCssClass',
'is_striped' => 'getIsStriped',
'is_bordered' => 'getIsBordered',
'is_hover' => 'getIsHover',
'is_condensed' => 'getIsCondensed'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['custom_css_class'] = isset($data['custom_css_class']) ? $data['custom_css_class'] : null;
        $this->container['is_striped'] = isset($data['is_striped']) ? $data['is_striped'] : null;
        $this->container['is_bordered'] = isset($data['is_bordered']) ? $data['is_bordered'] : null;
        $this->container['is_hover'] = isset($data['is_hover']) ? $data['is_hover'] : null;
        $this->container['is_condensed'] = isset($data['is_condensed']) ? $data['is_condensed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['custom_css_class'] === null) {
            $invalidProperties[] = "'custom_css_class' can't be null";
        }
        if ($this->container['is_striped'] === null) {
            $invalidProperties[] = "'is_striped' can't be null";
        }
        if ($this->container['is_bordered'] === null) {
            $invalidProperties[] = "'is_bordered' can't be null";
        }
        if ($this->container['is_hover'] === null) {
            $invalidProperties[] = "'is_hover' can't be null";
        }
        if ($this->container['is_condensed'] === null) {
            $invalidProperties[] = "'is_condensed' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets custom_css_class
     *
     * @return string
     */
    public function getCustomCssClass()
    {
        return $this->container['custom_css_class'];
    }

    /**
     * Sets custom_css_class
     *
     * @param string $custom_css_class CSS class to assign to the element
     *
     * @return $this
     */
    public function setCustomCssClass($custom_css_class)
    {
        $this->container['custom_css_class'] = $custom_css_class;

        return $this;
    }

    /**
     * Gets is_striped
     *
     * @return bool
     */
    public function getIsStriped()
    {
        return $this->container['is_striped'];
    }

    /**
     * Sets is_striped
     *
     * @param bool $is_striped Defines if the table is striped (every second row has a colored background for better readability).
     *
     * @return $this
     */
    public function setIsStriped($is_striped)
    {
        $this->container['is_striped'] = $is_striped;

        return $this;
    }

    /**
     * Gets is_bordered
     *
     * @return bool
     */
    public function getIsBordered()
    {
        return $this->container['is_bordered'];
    }

    /**
     * Sets is_bordered
     *
     * @param bool $is_bordered Defines if the table has borders.
     *
     * @return $this
     */
    public function setIsBordered($is_bordered)
    {
        $this->container['is_bordered'] = $is_bordered;

        return $this;
    }

    /**
     * Gets is_hover
     *
     * @return bool
     */
    public function getIsHover()
    {
        return $this->container['is_hover'];
    }

    /**
     * Sets is_hover
     *
     * @param bool $is_hover Defines if rows are highlighted when hovered.
     *
     * @return $this
     */
    public function setIsHover($is_hover)
    {
        $this->container['is_hover'] = $is_hover;

        return $this;
    }

    /**
     * Gets is_condensed
     *
     * @return bool
     */
    public function getIsCondensed()
    {
        return $this->container['is_condensed'];
    }

    /**
     * Sets is_condensed
     *
     * @param bool $is_condensed Condenses the size of the table.
     *
     * @return $this
     */
    public function setIsCondensed($is_condensed)
    {
        $this->container['is_condensed'] = $is_condensed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
