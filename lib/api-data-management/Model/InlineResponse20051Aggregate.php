<?php
/**
 * InlineResponse20051Aggregate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Data Management
 *
 * Welcome to Synerise API Reference! We hope that you'll enjoy your stay here.  If you need help with our services, feel free to contact us at  [support@synerise.com](mailto:support@synerise.com).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: Jul 4, 2022 12:12:40 PM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Synerise\DataManagement\Model;

use \ArrayAccess;
use \Synerise\DataManagement\ObjectSerializer;

/**
 * InlineResponse20051Aggregate Class Doc Comment
 *
 * @category Class
 * @description Structure of the analysis
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20051Aggregate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_51_aggregate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'description' => 'string',
'id' => 'string',
'uuid' => 'string',
'action_id' => 'int',
'action' => '\Synerise\DataManagement\Model\AggregateAction',
'attribute' => 'OneOfinlineResponse20051AggregateAttribute',
'type' => 'string',
'size' => 'int',
'unique' => 'bool',
'date_filter' => 'OneOfinlineResponse20051AggregateDateFilter',
'expressions' => '\Synerise\DataManagement\Model\AggregateExpressions[]',
'old_id' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'description' => null,
'id' => 'uuid',
'uuid' => 'uuid',
'action_id' => null,
'action' => null,
'attribute' => null,
'type' => null,
'size' => null,
'unique' => null,
'date_filter' => null,
'expressions' => null,
'old_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'description' => 'description',
'id' => 'id',
'uuid' => 'uuid',
'action_id' => 'actionId',
'action' => 'action',
'attribute' => 'attribute',
'type' => 'type',
'size' => 'size',
'unique' => 'unique',
'date_filter' => 'dateFilter',
'expressions' => 'expressions',
'old_id' => 'oldId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'description' => 'setDescription',
'id' => 'setId',
'uuid' => 'setUuid',
'action_id' => 'setActionId',
'action' => 'setAction',
'attribute' => 'setAttribute',
'type' => 'setType',
'size' => 'setSize',
'unique' => 'setUnique',
'date_filter' => 'setDateFilter',
'expressions' => 'setExpressions',
'old_id' => 'setOldId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'description' => 'getDescription',
'id' => 'getId',
'uuid' => 'getUuid',
'action_id' => 'getActionId',
'action' => 'getAction',
'attribute' => 'getAttribute',
'type' => 'getType',
'size' => 'getSize',
'unique' => 'getUnique',
'date_filter' => 'getDateFilter',
'expressions' => 'getExpressions',
'old_id' => 'getOldId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_AVG = 'AVG';
const TYPE_SUM = 'SUM';
const TYPE_MIN = 'MIN';
const TYPE_MAX = 'MAX';
const TYPE_COUNT = 'COUNT';
const TYPE_LAST = 'LAST';
const TYPE_FIRST = 'FIRST';
const TYPE_EXISTS = 'EXISTS';
const TYPE_FIRST_MULTI = 'FIRST_MULTI';
const TYPE_LAST_MULTI = 'LAST_MULTI';
const TYPE_TOP = 'TOP';
const TYPE_BOTTOM = 'BOTTOM';
const TYPE_TOP_MULTI = 'TOP_MULTI';
const TYPE_BOTTOM_MULTI = 'BOTTOM_MULTI';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_AVG,
self::TYPE_SUM,
self::TYPE_MIN,
self::TYPE_MAX,
self::TYPE_COUNT,
self::TYPE_LAST,
self::TYPE_FIRST,
self::TYPE_EXISTS,
self::TYPE_FIRST_MULTI,
self::TYPE_LAST_MULTI,
self::TYPE_TOP,
self::TYPE_BOTTOM,
self::TYPE_TOP_MULTI,
self::TYPE_BOTTOM_MULTI,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['action_id'] = isset($data['action_id']) ? $data['action_id'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['attribute'] = isset($data['attribute']) ? $data['attribute'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['unique'] = isset($data['unique']) ? $data['unique'] : false;
        $this->container['date_filter'] = isset($data['date_filter']) ? $data['date_filter'] : null;
        $this->container['expressions'] = isset($data['expressions']) ? $data['expressions'] : null;
        $this->container['old_id'] = isset($data['old_id']) ? $data['old_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Title of the aggregate
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the aggregate
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id UUID of the aggregate
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid UUID of the aggregate
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets action_id
     *
     * @return int
     */
    public function getActionId()
    {
        return $this->container['action_id'];
    }

    /**
     * Sets action_id
     *
     * @param int $action_id ID of the event. `0` denotes \"no event\".
     *
     * @return $this
     */
    public function setActionId($action_id)
    {
        $this->container['action_id'] = $action_id;

        return $this;
    }

    /**
     * Gets action
     *
     * @return \Synerise\DataManagement\Model\AggregateAction
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param \Synerise\DataManagement\Model\AggregateAction $action action
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets attribute
     *
     * @return OneOfinlineResponse20051AggregateAttribute
     */
    public function getAttribute()
    {
        return $this->container['attribute'];
    }

    /**
     * Sets attribute
     *
     * @param OneOfinlineResponse20051AggregateAttribute $attribute The type of data to apply a match logic to. You can analyze parameters, expressions, and special data types. In this object, you provide the source of data.
     *
     * @return $this
     */
    public function setAttribute($attribute)
    {
        $this->container['attribute'] = $attribute;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of calculation.   - COUNT allows you to count the total number of the entities that meet the filters.  - SUM, MIN, MAX, and AVG allow you to perform calculations on numerical-value parameters within the entities that meet the filters.  - EXISTS checks the existence of at least a single entity that meets the filters and returns 1 when \"true\" or 0 when \"false\".  - LAST and LAST_MULTI retrieve the newest matching data.  - FIRST and FIRST_MULTI retrieve the oldest matching data.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size Only applies when `type` is LAST_MULTI or FIRST_MULTI or TOP_MULTI or BOTTOM_MULTI. Defines how many results to return.
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets unique
     *
     * @return bool
     */
    public function getUnique()
    {
        return $this->container['unique'];
    }

    /**
     * Sets unique
     *
     * @param bool $unique Only applies when `type` is LAST_MULTI or FIRST_MULTI or TOP_MULTI or BOTTOM_MULTI. When set to \"true\", only unique occurrences of an event parameter are included in the results.
     *
     * @return $this
     */
    public function setUnique($unique)
    {
        $this->container['unique'] = $unique;

        return $this;
    }

    /**
     * Gets date_filter
     *
     * @return OneOfinlineResponse20051AggregateDateFilter
     */
    public function getDateFilter()
    {
        return $this->container['date_filter'];
    }

    /**
     * Sets date_filter
     *
     * @param OneOfinlineResponse20051AggregateDateFilter $date_filter Details of the date filter. The analysis results are calculated from data that matches the filter.
     *
     * @return $this
     */
    public function setDateFilter($date_filter)
    {
        $this->container['date_filter'] = $date_filter;

        return $this;
    }

    /**
     * Gets expressions
     *
     * @return \Synerise\DataManagement\Model\AggregateExpressions[]
     */
    public function getExpressions()
    {
        return $this->container['expressions'];
    }

    /**
     * Sets expressions
     *
     * @param \Synerise\DataManagement\Model\AggregateExpressions[] $expressions An array of conditions that the event must meet
     *
     * @return $this
     */
    public function setExpressions($expressions)
    {
        $this->container['expressions'] = $expressions;

        return $this;
    }

    /**
     * Gets old_id
     *
     * @return string
     */
    public function getOldId()
    {
        return $this->container['old_id'];
    }

    /**
     * Sets old_id
     *
     * @param string $old_id Deprecated field
     *
     * @return $this
     */
    public function setOldId($old_id)
    {
        $this->container['old_id'] = $old_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
