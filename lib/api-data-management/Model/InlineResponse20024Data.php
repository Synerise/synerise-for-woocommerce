<?php
/**
 * InlineResponse20024Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Data Management
 *
 * Welcome to Synerise API Reference! We hope that you'll enjoy your stay here.  If you need help with our services, feel free to contact us at  [support@synerise.com](mailto:support@synerise.com).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: Jul 4, 2022 12:12:40 PM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Synerise\DataManagement\Model;

use \ArrayAccess;
use \Synerise\DataManagement\ObjectSerializer;

/**
 * InlineResponse20024Data Class Doc Comment
 *
 * @category Class
 * @description Details of the mapping
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20024Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_24_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bp_action_param_key' => 'string',
'bag_id' => 'int',
'business_profile_id' => 'int',
'action' => 'string',
'param_key' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bp_action_param_key' => null,
'bag_id' => null,
'business_profile_id' => null,
'action' => null,
'param_key' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bp_action_param_key' => 'bpActionParamKey',
'bag_id' => 'bagId',
'business_profile_id' => 'businessProfileId',
'action' => 'action',
'param_key' => 'paramKey'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bp_action_param_key' => 'setBpActionParamKey',
'bag_id' => 'setBagId',
'business_profile_id' => 'setBusinessProfileId',
'action' => 'setAction',
'param_key' => 'setParamKey'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bp_action_param_key' => 'getBpActionParamKey',
'bag_id' => 'getBagId',
'business_profile_id' => 'getBusinessProfileId',
'action' => 'getAction',
'param_key' => 'getParamKey'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bp_action_param_key'] = isset($data['bp_action_param_key']) ? $data['bp_action_param_key'] : null;
        $this->container['bag_id'] = isset($data['bag_id']) ? $data['bag_id'] : null;
        $this->container['business_profile_id'] = isset($data['business_profile_id']) ? $data['business_profile_id'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['param_key'] = isset($data['param_key']) ? $data['param_key'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bp_action_param_key
     *
     * @return string
     */
    public function getBpActionParamKey()
    {
        return $this->container['bp_action_param_key'];
    }

    /**
     * Sets bp_action_param_key
     *
     * @param string $bp_action_param_key The unique identifier of this mapping
     *
     * @return $this
     */
    public function setBpActionParamKey($bp_action_param_key)
    {
        $this->container['bp_action_param_key'] = $bp_action_param_key;

        return $this;
    }

    /**
     * Gets bag_id
     *
     * @return int
     */
    public function getBagId()
    {
        return $this->container['bag_id'];
    }

    /**
     * Sets bag_id
     *
     * @param int $bag_id The catalog associated with this mapping
     *
     * @return $this
     */
    public function setBagId($bag_id)
    {
        $this->container['bag_id'] = $bag_id;

        return $this;
    }

    /**
     * Gets business_profile_id
     *
     * @return int
     */
    public function getBusinessProfileId()
    {
        return $this->container['business_profile_id'];
    }

    /**
     * Sets business_profile_id
     *
     * @param int $business_profile_id ID of the Business Profile that contains this mapping
     *
     * @return $this
     */
    public function setBusinessProfileId($business_profile_id)
    {
        $this->container['business_profile_id'] = $business_profile_id;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action The `action` field of the event
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets param_key
     *
     * @return string
     */
    public function getParamKey()
    {
        return $this->container['param_key'];
    }

    /**
     * Sets param_key
     *
     * @param string $param_key The parameter in the event that corresponds to the catalog column with the unique identifiers
     *
     * @return $this
     */
    public function setParamKey($param_key)
    {
        $this->container['param_key'] = $param_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
