<?php
/**
 * EventscancelledtransactionParams
 *
 * PHP version 5
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Data Management
 *
 * Welcome to Synerise API Reference! We hope that you'll enjoy your stay here.  If you need help with our services, feel free to contact us at  [support@synerise.com](mailto:support@synerise.com).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: Jul 4, 2022 12:12:40 PM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Synerise\DataManagement\Model;

use \ArrayAccess;
use \Synerise\DataManagement\ObjectSerializer;

/**
 * EventscancelledtransactionParams Class Doc Comment
 *
 * @category Class
 * @description Additional parameters. Remember that you can use [event enrichment](https://help.synerise.com/docs/assets/events/adding-event-parameters/) to add the data automatically from a catalog.  Aside from the required parameters (if any exist), all events accept custom, free-form parameters, with the following restrictions:    &lt;span style&#x3D;\&quot;color:red\&quot;&gt;&lt;strong&gt;WARNING:&lt;/strong&gt;&lt;/span&gt;   - If you want to send the &#x60;email&#x60; param, it must be exactly the same as the email of the client who generated the event.   - Some params are reserved for system use. If you send them in the &#x60;params&#x60; object, they are ignored or overwritten with system-assigned values:&lt;br&gt;   &lt;code&gt;modifiedBy&lt;/code&gt;&lt;br&gt;   &lt;code&gt;apiKey&lt;/code&gt;&lt;br&gt;   &lt;code&gt;eventUUID&lt;/code&gt;&lt;br&gt;   &lt;code&gt;ip&lt;/code&gt;&lt;br&gt;   &lt;code&gt;time&lt;/code&gt;&lt;br&gt;   &lt;code&gt;businessProfileId&lt;/code&gt;
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventscancelledtransactionParams implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'eventscancelledtransaction_params';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'string',
'order_status' => 'string',
'discount_amount' => '\Synerise\DataManagement\Model\TransactionsDiscountAmount',
'discount_percent' => 'float',
'discount_code' => 'string',
'value' => '\Synerise\DataManagement\Model\TransactionsValue',
'revenue' => '\Synerise\DataManagement\Model\TransactionsRevenue',
'products' => '\Synerise\DataManagement\Model\TransactionsProducts[]',
'source' => 'string',
'payment_info' => '\Synerise\DataManagement\Model\TransactionsPaymentInfo'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => null,
'order_status' => null,
'discount_amount' => null,
'discount_percent' => 'float',
'discount_code' => null,
'value' => null,
'revenue' => null,
'products' => null,
'source' => null,
'payment_info' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'orderId',
'order_status' => 'orderStatus',
'discount_amount' => 'discountAmount',
'discount_percent' => 'discountPercent',
'discount_code' => 'discountCode',
'value' => 'value',
'revenue' => 'revenue',
'products' => 'products',
'source' => 'source',
'payment_info' => 'paymentInfo'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
'order_status' => 'setOrderStatus',
'discount_amount' => 'setDiscountAmount',
'discount_percent' => 'setDiscountPercent',
'discount_code' => 'setDiscountCode',
'value' => 'setValue',
'revenue' => 'setRevenue',
'products' => 'setProducts',
'source' => 'setSource',
'payment_info' => 'setPaymentInfo'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
'order_status' => 'getOrderStatus',
'discount_amount' => 'getDiscountAmount',
'discount_percent' => 'getDiscountPercent',
'discount_code' => 'getDiscountCode',
'value' => 'getValue',
'revenue' => 'getRevenue',
'products' => 'getProducts',
'source' => 'getSource',
'payment_info' => 'getPaymentInfo'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SOURCE_WEB_DESKTOP = 'WEB_DESKTOP';
const SOURCE_WEB_MOBILE = 'WEB_MOBILE';
const SOURCE_MOBILE_APP = 'MOBILE_APP';
const SOURCE_POS = 'POS';
const SOURCE_MOBILE = 'MOBILE';
const SOURCE_DESKTOP = 'DESKTOP';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_WEB_DESKTOP,
self::SOURCE_WEB_MOBILE,
self::SOURCE_MOBILE_APP,
self::SOURCE_POS,
self::SOURCE_MOBILE,
self::SOURCE_DESKTOP,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['order_status'] = isset($data['order_status']) ? $data['order_status'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['discount_code'] = isset($data['discount_code']) ? $data['discount_code'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['revenue'] = isset($data['revenue']) ? $data['revenue'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['payment_info'] = isset($data['payment_info']) ? $data['payment_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id ID of the transaction
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string $order_status Status of the order
     *
     * @return $this
     */
    public function setOrderStatus($order_status)
    {
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return \Synerise\DataManagement\Model\TransactionsDiscountAmount
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param \Synerise\DataManagement\Model\TransactionsDiscountAmount $discount_amount discount_amount
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return float
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param float $discount_percent Discount as a percentage
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets discount_code
     *
     * @return string
     */
    public function getDiscountCode()
    {
        return $this->container['discount_code'];
    }

    /**
     * Sets discount_code
     *
     * @param string $discount_code Discount code
     *
     * @return $this
     */
    public function setDiscountCode($discount_code)
    {
        $this->container['discount_code'] = $discount_code;

        return $this;
    }

    /**
     * Gets value
     *
     * @return \Synerise\DataManagement\Model\TransactionsValue
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param \Synerise\DataManagement\Model\TransactionsValue $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets revenue
     *
     * @return \Synerise\DataManagement\Model\TransactionsRevenue
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue
     *
     * @param \Synerise\DataManagement\Model\TransactionsRevenue $revenue revenue
     *
     * @return $this
     */
    public function setRevenue($revenue)
    {
        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \Synerise\DataManagement\Model\TransactionsProducts[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \Synerise\DataManagement\Model\TransactionsProducts[] $products A list of products in the transaction
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source Source of the event.
     *
     * @return $this
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($source) && !in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets payment_info
     *
     * @return \Synerise\DataManagement\Model\TransactionsPaymentInfo
     */
    public function getPaymentInfo()
    {
        return $this->container['payment_info'];
    }

    /**
     * Sets payment_info
     *
     * @param \Synerise\DataManagement\Model\TransactionsPaymentInfo $payment_info payment_info
     *
     * @return $this
     */
    public function setPaymentInfo($payment_info)
    {
        $this->container['payment_info'] = $payment_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
