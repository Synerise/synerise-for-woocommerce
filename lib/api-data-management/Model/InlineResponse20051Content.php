<?php
/**
 * InlineResponse20051Content
 *
 * PHP version 5
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Data Management
 *
 * Welcome to Synerise API Reference! We hope that you'll enjoy your stay here.  If you need help with our services, feel free to contact us at  [support@synerise.com](mailto:support@synerise.com).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: Jul 4, 2022 12:12:40 PM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Synerise\DataManagement\Model;

use \ArrayAccess;
use \Synerise\DataManagement\ObjectSerializer;

/**
 * InlineResponse20051Content Class Doc Comment
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20051Content implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_51_content';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created_by' => '\Synerise\DataManagement\Model\ExpressionPayloadCreatedBy',
'modified_by' => '\Synerise\DataManagement\Model\ExpressionPayloadModifiedBy',
'aggregate' => '\Synerise\DataManagement\Model\InlineResponse20051Aggregate',
'name' => 'string',
'description' => 'string',
'deleted' => 'bool',
'is_visible_for_client_profile' => 'bool',
'variables' => '\Synerise\DataManagement\Model\AnalyticsdefinitionsmanagerexpressionsprojectionsVariables[]',
'is_dynamic_analytic' => 'bool',
'is_predefined_analytic' => 'bool',
'analytic_version' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created_by' => null,
'modified_by' => null,
'aggregate' => null,
'name' => null,
'description' => null,
'deleted' => null,
'is_visible_for_client_profile' => null,
'variables' => null,
'is_dynamic_analytic' => null,
'is_predefined_analytic' => null,
'analytic_version' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_by' => 'createdBy',
'modified_by' => 'modifiedBy',
'aggregate' => 'aggregate',
'name' => 'name',
'description' => 'description',
'deleted' => 'deleted',
'is_visible_for_client_profile' => 'isVisibleForClientProfile',
'variables' => 'variables',
'is_dynamic_analytic' => 'isDynamicAnalytic',
'is_predefined_analytic' => 'isPredefinedAnalytic',
'analytic_version' => 'analyticVersion'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_by' => 'setCreatedBy',
'modified_by' => 'setModifiedBy',
'aggregate' => 'setAggregate',
'name' => 'setName',
'description' => 'setDescription',
'deleted' => 'setDeleted',
'is_visible_for_client_profile' => 'setIsVisibleForClientProfile',
'variables' => 'setVariables',
'is_dynamic_analytic' => 'setIsDynamicAnalytic',
'is_predefined_analytic' => 'setIsPredefinedAnalytic',
'analytic_version' => 'setAnalyticVersion'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_by' => 'getCreatedBy',
'modified_by' => 'getModifiedBy',
'aggregate' => 'getAggregate',
'name' => 'getName',
'description' => 'getDescription',
'deleted' => 'getDeleted',
'is_visible_for_client_profile' => 'getIsVisibleForClientProfile',
'variables' => 'getVariables',
'is_dynamic_analytic' => 'getIsDynamicAnalytic',
'is_predefined_analytic' => 'getIsPredefinedAnalytic',
'analytic_version' => 'getAnalyticVersion'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['modified_by'] = isset($data['modified_by']) ? $data['modified_by'] : null;
        $this->container['aggregate'] = isset($data['aggregate']) ? $data['aggregate'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['is_visible_for_client_profile'] = isset($data['is_visible_for_client_profile']) ? $data['is_visible_for_client_profile'] : null;
        $this->container['variables'] = isset($data['variables']) ? $data['variables'] : null;
        $this->container['is_dynamic_analytic'] = isset($data['is_dynamic_analytic']) ? $data['is_dynamic_analytic'] : null;
        $this->container['is_predefined_analytic'] = isset($data['is_predefined_analytic']) ? $data['is_predefined_analytic'] : null;
        $this->container['analytic_version'] = isset($data['analytic_version']) ? $data['analytic_version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_by
     *
     * @return \Synerise\DataManagement\Model\ExpressionPayloadCreatedBy
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Synerise\DataManagement\Model\ExpressionPayloadCreatedBy $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return \Synerise\DataManagement\Model\ExpressionPayloadModifiedBy
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param \Synerise\DataManagement\Model\ExpressionPayloadModifiedBy $modified_by modified_by
     *
     * @return $this
     */
    public function setModifiedBy($modified_by)
    {
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets aggregate
     *
     * @return \Synerise\DataManagement\Model\InlineResponse20051Aggregate
     */
    public function getAggregate()
    {
        return $this->container['aggregate'];
    }

    /**
     * Sets aggregate
     *
     * @param \Synerise\DataManagement\Model\InlineResponse20051Aggregate $aggregate aggregate
     *
     * @return $this
     */
    public function setAggregate($aggregate)
    {
        $this->container['aggregate'] = $aggregate;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the aggregate
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the aggregate
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted Informs if the analysis was deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets is_visible_for_client_profile
     *
     * @return bool
     */
    public function getIsVisibleForClientProfile()
    {
        return $this->container['is_visible_for_client_profile'];
    }

    /**
     * Sets is_visible_for_client_profile
     *
     * @param bool $is_visible_for_client_profile When set to `true`, information about this analysis can be shown in a customer's card. In the Synerise CRM, only aggregates, segmentations, and expressions can be shown.
     *
     * @return $this
     */
    public function setIsVisibleForClientProfile($is_visible_for_client_profile)
    {
        $this->container['is_visible_for_client_profile'] = $is_visible_for_client_profile;

        return $this;
    }

    /**
     * Gets variables
     *
     * @return \Synerise\DataManagement\Model\AnalyticsdefinitionsmanagerexpressionsprojectionsVariables[]
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     *
     * @param \Synerise\DataManagement\Model\AnalyticsdefinitionsmanagerexpressionsprojectionsVariables[] $variables A list of dynamically modifiable variables that occur in this analysis
     *
     * @return $this
     */
    public function setVariables($variables)
    {
        $this->container['variables'] = $variables;

        return $this;
    }

    /**
     * Gets is_dynamic_analytic
     *
     * @return bool
     */
    public function getIsDynamicAnalytic()
    {
        return $this->container['is_dynamic_analytic'];
    }

    /**
     * Sets is_dynamic_analytic
     *
     * @param bool $is_dynamic_analytic Informs if this is a dynamic analysis.
     *
     * @return $this
     */
    public function setIsDynamicAnalytic($is_dynamic_analytic)
    {
        $this->container['is_dynamic_analytic'] = $is_dynamic_analytic;

        return $this;
    }

    /**
     * Gets is_predefined_analytic
     *
     * @return bool
     */
    public function getIsPredefinedAnalytic()
    {
        return $this->container['is_predefined_analytic'];
    }

    /**
     * Sets is_predefined_analytic
     *
     * @param bool $is_predefined_analytic Informs if this is a pre-defined analysis.
     *
     * @return $this
     */
    public function setIsPredefinedAnalytic($is_predefined_analytic)
    {
        $this->container['is_predefined_analytic'] = $is_predefined_analytic;

        return $this;
    }

    /**
     * Gets analytic_version
     *
     * @return string
     */
    public function getAnalyticVersion()
    {
        return $this->container['analytic_version'];
    }

    /**
     * Sets analytic_version
     *
     * @param string $analytic_version Aggregate version UUID
     *
     * @return $this
     */
    public function setAnalyticVersion($analytic_version)
    {
        $this->container['analytic_version'] = $analytic_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
