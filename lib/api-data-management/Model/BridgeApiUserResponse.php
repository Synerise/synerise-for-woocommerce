<?php
/**
 * BridgeApiUserResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Data Management
 *
 * Welcome to Synerise API Reference! We hope that you'll enjoy your stay here.  If you need help with our services, feel free to contact us at  [support@synerise.com](mailto:support@synerise.com).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: Jul 4, 2022 12:12:40 PM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Synerise\DataManagement\Model;

use \ArrayAccess;
use \Synerise\DataManagement\ObjectSerializer;

/**
 * BridgeApiUserResponse Class Doc Comment
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BridgeApiUserResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BridgeApiUserResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additionalinfo1' => 'string',
'additionalinfo2' => 'string',
'address' => 'string',
'city' => 'string',
'company' => 'string',
'confirmation_token' => '\Synerise\DataManagement\Model\ConfirmationToken',
'confirmed' => 'bool',
'created' => '\DateTime',
'credentials_expire_at' => '\DateTime',
'credentials_expired' => 'bool',
'displayname' => 'string',
'email' => 'string',
'email_canonical' => 'string',
'enabled' => 'bool',
'entity_status' => 'string',
'expired' => 'bool',
'expires_at' => '\DateTime',
'facebook_id' => 'string',
'firstname' => 'string',
'guid' => 'string',
'hg_task_user_id' => 'int',
'id' => 'int',
'last_login' => '\DateTime',
'lastname' => 'string',
'locked' => 'bool',
'parent_id' => 'string',
'password_requested_at' => '\DateTime',
'phone' => 'string',
'photo_local_path' => 'string',
'photo_remote_path' => 'string',
'post_activity_on_facebook' => 'string',
'province' => 'string',
'roles' => 'string',
'salt' => 'string',
'updated' => '\DateTime',
'username' => 'string',
'username_canonical' => 'string',
'zip_code' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additionalinfo1' => null,
'additionalinfo2' => null,
'address' => null,
'city' => null,
'company' => null,
'confirmation_token' => null,
'confirmed' => null,
'created' => 'date-time',
'credentials_expire_at' => 'date-time',
'credentials_expired' => null,
'displayname' => null,
'email' => null,
'email_canonical' => null,
'enabled' => null,
'entity_status' => null,
'expired' => null,
'expires_at' => 'date-time',
'facebook_id' => null,
'firstname' => null,
'guid' => null,
'hg_task_user_id' => 'int64',
'id' => 'int64',
'last_login' => 'date-time',
'lastname' => null,
'locked' => null,
'parent_id' => null,
'password_requested_at' => 'date-time',
'phone' => null,
'photo_local_path' => null,
'photo_remote_path' => null,
'post_activity_on_facebook' => null,
'province' => null,
'roles' => null,
'salt' => null,
'updated' => 'date-time',
'username' => null,
'username_canonical' => null,
'zip_code' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additionalinfo1' => 'additionalinfo1',
'additionalinfo2' => 'additionalinfo2',
'address' => 'address',
'city' => 'city',
'company' => 'company',
'confirmation_token' => 'confirmation_token',
'confirmed' => 'confirmed',
'created' => 'created',
'credentials_expire_at' => 'credentials_expire_at',
'credentials_expired' => 'credentials_expired',
'displayname' => 'displayname',
'email' => 'email',
'email_canonical' => 'email_canonical',
'enabled' => 'enabled',
'entity_status' => 'entity_status',
'expired' => 'expired',
'expires_at' => 'expires_at',
'facebook_id' => 'facebookId',
'firstname' => 'firstname',
'guid' => 'guid',
'hg_task_user_id' => 'hg_task_user_id',
'id' => 'id',
'last_login' => 'last_login',
'lastname' => 'lastname',
'locked' => 'locked',
'parent_id' => 'parent_id',
'password_requested_at' => 'password_requested_at',
'phone' => 'phone',
'photo_local_path' => 'photo_local_path',
'photo_remote_path' => 'photo_remote_path',
'post_activity_on_facebook' => 'post_activity_on_facebook',
'province' => 'province',
'roles' => 'roles',
'salt' => 'salt',
'updated' => 'updated',
'username' => 'username',
'username_canonical' => 'username_canonical',
'zip_code' => 'zipCode'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additionalinfo1' => 'setAdditionalinfo1',
'additionalinfo2' => 'setAdditionalinfo2',
'address' => 'setAddress',
'city' => 'setCity',
'company' => 'setCompany',
'confirmation_token' => 'setConfirmationToken',
'confirmed' => 'setConfirmed',
'created' => 'setCreated',
'credentials_expire_at' => 'setCredentialsExpireAt',
'credentials_expired' => 'setCredentialsExpired',
'displayname' => 'setDisplayname',
'email' => 'setEmail',
'email_canonical' => 'setEmailCanonical',
'enabled' => 'setEnabled',
'entity_status' => 'setEntityStatus',
'expired' => 'setExpired',
'expires_at' => 'setExpiresAt',
'facebook_id' => 'setFacebookId',
'firstname' => 'setFirstname',
'guid' => 'setGuid',
'hg_task_user_id' => 'setHgTaskUserId',
'id' => 'setId',
'last_login' => 'setLastLogin',
'lastname' => 'setLastname',
'locked' => 'setLocked',
'parent_id' => 'setParentId',
'password_requested_at' => 'setPasswordRequestedAt',
'phone' => 'setPhone',
'photo_local_path' => 'setPhotoLocalPath',
'photo_remote_path' => 'setPhotoRemotePath',
'post_activity_on_facebook' => 'setPostActivityOnFacebook',
'province' => 'setProvince',
'roles' => 'setRoles',
'salt' => 'setSalt',
'updated' => 'setUpdated',
'username' => 'setUsername',
'username_canonical' => 'setUsernameCanonical',
'zip_code' => 'setZipCode'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additionalinfo1' => 'getAdditionalinfo1',
'additionalinfo2' => 'getAdditionalinfo2',
'address' => 'getAddress',
'city' => 'getCity',
'company' => 'getCompany',
'confirmation_token' => 'getConfirmationToken',
'confirmed' => 'getConfirmed',
'created' => 'getCreated',
'credentials_expire_at' => 'getCredentialsExpireAt',
'credentials_expired' => 'getCredentialsExpired',
'displayname' => 'getDisplayname',
'email' => 'getEmail',
'email_canonical' => 'getEmailCanonical',
'enabled' => 'getEnabled',
'entity_status' => 'getEntityStatus',
'expired' => 'getExpired',
'expires_at' => 'getExpiresAt',
'facebook_id' => 'getFacebookId',
'firstname' => 'getFirstname',
'guid' => 'getGuid',
'hg_task_user_id' => 'getHgTaskUserId',
'id' => 'getId',
'last_login' => 'getLastLogin',
'lastname' => 'getLastname',
'locked' => 'getLocked',
'parent_id' => 'getParentId',
'password_requested_at' => 'getPasswordRequestedAt',
'phone' => 'getPhone',
'photo_local_path' => 'getPhotoLocalPath',
'photo_remote_path' => 'getPhotoRemotePath',
'post_activity_on_facebook' => 'getPostActivityOnFacebook',
'province' => 'getProvince',
'roles' => 'getRoles',
'salt' => 'getSalt',
'updated' => 'getUpdated',
'username' => 'getUsername',
'username_canonical' => 'getUsernameCanonical',
'zip_code' => 'getZipCode'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additionalinfo1'] = isset($data['additionalinfo1']) ? $data['additionalinfo1'] : null;
        $this->container['additionalinfo2'] = isset($data['additionalinfo2']) ? $data['additionalinfo2'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['confirmation_token'] = isset($data['confirmation_token']) ? $data['confirmation_token'] : null;
        $this->container['confirmed'] = isset($data['confirmed']) ? $data['confirmed'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['credentials_expire_at'] = isset($data['credentials_expire_at']) ? $data['credentials_expire_at'] : null;
        $this->container['credentials_expired'] = isset($data['credentials_expired']) ? $data['credentials_expired'] : null;
        $this->container['displayname'] = isset($data['displayname']) ? $data['displayname'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['email_canonical'] = isset($data['email_canonical']) ? $data['email_canonical'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['entity_status'] = isset($data['entity_status']) ? $data['entity_status'] : null;
        $this->container['expired'] = isset($data['expired']) ? $data['expired'] : null;
        $this->container['expires_at'] = isset($data['expires_at']) ? $data['expires_at'] : null;
        $this->container['facebook_id'] = isset($data['facebook_id']) ? $data['facebook_id'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['guid'] = isset($data['guid']) ? $data['guid'] : null;
        $this->container['hg_task_user_id'] = isset($data['hg_task_user_id']) ? $data['hg_task_user_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_login'] = isset($data['last_login']) ? $data['last_login'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['password_requested_at'] = isset($data['password_requested_at']) ? $data['password_requested_at'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['photo_local_path'] = isset($data['photo_local_path']) ? $data['photo_local_path'] : null;
        $this->container['photo_remote_path'] = isset($data['photo_remote_path']) ? $data['photo_remote_path'] : null;
        $this->container['post_activity_on_facebook'] = isset($data['post_activity_on_facebook']) ? $data['post_activity_on_facebook'] : null;
        $this->container['province'] = isset($data['province']) ? $data['province'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['salt'] = isset($data['salt']) ? $data['salt'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['username_canonical'] = isset($data['username_canonical']) ? $data['username_canonical'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additionalinfo1
     *
     * @return string
     */
    public function getAdditionalinfo1()
    {
        return $this->container['additionalinfo1'];
    }

    /**
     * Sets additionalinfo1
     *
     * @param string $additionalinfo1 additionalinfo1
     *
     * @return $this
     */
    public function setAdditionalinfo1($additionalinfo1)
    {
        $this->container['additionalinfo1'] = $additionalinfo1;

        return $this;
    }

    /**
     * Gets additionalinfo2
     *
     * @return string
     */
    public function getAdditionalinfo2()
    {
        return $this->container['additionalinfo2'];
    }

    /**
     * Sets additionalinfo2
     *
     * @param string $additionalinfo2 additionalinfo2
     *
     * @return $this
     */
    public function setAdditionalinfo2($additionalinfo2)
    {
        $this->container['additionalinfo2'] = $additionalinfo2;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string $company company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets confirmation_token
     *
     * @return \Synerise\DataManagement\Model\ConfirmationToken
     */
    public function getConfirmationToken()
    {
        return $this->container['confirmation_token'];
    }

    /**
     * Sets confirmation_token
     *
     * @param \Synerise\DataManagement\Model\ConfirmationToken $confirmation_token confirmation_token
     *
     * @return $this
     */
    public function setConfirmationToken($confirmation_token)
    {
        $this->container['confirmation_token'] = $confirmation_token;

        return $this;
    }

    /**
     * Gets confirmed
     *
     * @return bool
     */
    public function getConfirmed()
    {
        return $this->container['confirmed'];
    }

    /**
     * Sets confirmed
     *
     * @param bool $confirmed confirmed
     *
     * @return $this
     */
    public function setConfirmed($confirmed)
    {
        $this->container['confirmed'] = $confirmed;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets credentials_expire_at
     *
     * @return \DateTime
     */
    public function getCredentialsExpireAt()
    {
        return $this->container['credentials_expire_at'];
    }

    /**
     * Sets credentials_expire_at
     *
     * @param \DateTime $credentials_expire_at credentials_expire_at
     *
     * @return $this
     */
    public function setCredentialsExpireAt($credentials_expire_at)
    {
        $this->container['credentials_expire_at'] = $credentials_expire_at;

        return $this;
    }

    /**
     * Gets credentials_expired
     *
     * @return bool
     */
    public function getCredentialsExpired()
    {
        return $this->container['credentials_expired'];
    }

    /**
     * Sets credentials_expired
     *
     * @param bool $credentials_expired credentials_expired
     *
     * @return $this
     */
    public function setCredentialsExpired($credentials_expired)
    {
        $this->container['credentials_expired'] = $credentials_expired;

        return $this;
    }

    /**
     * Gets displayname
     *
     * @return string
     */
    public function getDisplayname()
    {
        return $this->container['displayname'];
    }

    /**
     * Sets displayname
     *
     * @param string $displayname displayname
     *
     * @return $this
     */
    public function setDisplayname($displayname)
    {
        $this->container['displayname'] = $displayname;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets email_canonical
     *
     * @return string
     */
    public function getEmailCanonical()
    {
        return $this->container['email_canonical'];
    }

    /**
     * Sets email_canonical
     *
     * @param string $email_canonical email_canonical
     *
     * @return $this
     */
    public function setEmailCanonical($email_canonical)
    {
        $this->container['email_canonical'] = $email_canonical;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets entity_status
     *
     * @return string
     */
    public function getEntityStatus()
    {
        return $this->container['entity_status'];
    }

    /**
     * Sets entity_status
     *
     * @param string $entity_status entity_status
     *
     * @return $this
     */
    public function setEntityStatus($entity_status)
    {
        $this->container['entity_status'] = $entity_status;

        return $this;
    }

    /**
     * Gets expired
     *
     * @return bool
     */
    public function getExpired()
    {
        return $this->container['expired'];
    }

    /**
     * Sets expired
     *
     * @param bool $expired expired
     *
     * @return $this
     */
    public function setExpired($expired)
    {
        $this->container['expired'] = $expired;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return \DateTime
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param \DateTime $expires_at expires_at
     *
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets facebook_id
     *
     * @return string
     */
    public function getFacebookId()
    {
        return $this->container['facebook_id'];
    }

    /**
     * Sets facebook_id
     *
     * @param string $facebook_id facebook_id
     *
     * @return $this
     */
    public function setFacebookId($facebook_id)
    {
        $this->container['facebook_id'] = $facebook_id;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string $firstname firstname
     *
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets guid
     *
     * @return string
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string $guid guid
     *
     * @return $this
     */
    public function setGuid($guid)
    {
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets hg_task_user_id
     *
     * @return int
     */
    public function getHgTaskUserId()
    {
        return $this->container['hg_task_user_id'];
    }

    /**
     * Sets hg_task_user_id
     *
     * @param int $hg_task_user_id hg_task_user_id
     *
     * @return $this
     */
    public function setHgTaskUserId($hg_task_user_id)
    {
        $this->container['hg_task_user_id'] = $hg_task_user_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_login
     *
     * @return \DateTime
     */
    public function getLastLogin()
    {
        return $this->container['last_login'];
    }

    /**
     * Sets last_login
     *
     * @param \DateTime $last_login last_login
     *
     * @return $this
     */
    public function setLastLogin($last_login)
    {
        $this->container['last_login'] = $last_login;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname lastname
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool $locked locked
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets password_requested_at
     *
     * @return \DateTime
     */
    public function getPasswordRequestedAt()
    {
        return $this->container['password_requested_at'];
    }

    /**
     * Sets password_requested_at
     *
     * @param \DateTime $password_requested_at password_requested_at
     *
     * @return $this
     */
    public function setPasswordRequestedAt($password_requested_at)
    {
        $this->container['password_requested_at'] = $password_requested_at;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets photo_local_path
     *
     * @return string
     */
    public function getPhotoLocalPath()
    {
        return $this->container['photo_local_path'];
    }

    /**
     * Sets photo_local_path
     *
     * @param string $photo_local_path photo_local_path
     *
     * @return $this
     */
    public function setPhotoLocalPath($photo_local_path)
    {
        $this->container['photo_local_path'] = $photo_local_path;

        return $this;
    }

    /**
     * Gets photo_remote_path
     *
     * @return string
     */
    public function getPhotoRemotePath()
    {
        return $this->container['photo_remote_path'];
    }

    /**
     * Sets photo_remote_path
     *
     * @param string $photo_remote_path photo_remote_path
     *
     * @return $this
     */
    public function setPhotoRemotePath($photo_remote_path)
    {
        $this->container['photo_remote_path'] = $photo_remote_path;

        return $this;
    }

    /**
     * Gets post_activity_on_facebook
     *
     * @return string
     */
    public function getPostActivityOnFacebook()
    {
        return $this->container['post_activity_on_facebook'];
    }

    /**
     * Sets post_activity_on_facebook
     *
     * @param string $post_activity_on_facebook post_activity_on_facebook
     *
     * @return $this
     */
    public function setPostActivityOnFacebook($post_activity_on_facebook)
    {
        $this->container['post_activity_on_facebook'] = $post_activity_on_facebook;

        return $this;
    }

    /**
     * Gets province
     *
     * @return string
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     *
     * @param string $province province
     *
     * @return $this
     */
    public function setProvince($province)
    {
        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string $roles roles
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets salt
     *
     * @return string
     */
    public function getSalt()
    {
        return $this->container['salt'];
    }

    /**
     * Sets salt
     *
     * @param string $salt salt
     *
     * @return $this
     */
    public function setSalt($salt)
    {
        $this->container['salt'] = $salt;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated updated
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets username_canonical
     *
     * @return string
     */
    public function getUsernameCanonical()
    {
        return $this->container['username_canonical'];
    }

    /**
     * Sets username_canonical
     *
     * @param string $username_canonical username_canonical
     *
     * @return $this
     */
    public function setUsernameCanonical($username_canonical)
    {
        $this->container['username_canonical'] = $username_canonical;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code zip_code
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
