<?php
/**
 * TypeLayout
 *
 * PHP version 5
 *
 * @category Class
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Data Management
 *
 * Welcome to Synerise API Reference! We hope that you'll enjoy your stay here.  If you need help with our services, feel free to contact us at  [support@synerise.com](mailto:support@synerise.com).  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: Jul 4, 2022 12:12:40 PM
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Synerise\DataManagement\Model;

use \ArrayAccess;
use \Synerise\DataManagement\ObjectSerializer;

/**
 * TypeLayout Class Doc Comment
 *
 * @category Class
 * @description Layout of the item within its parent element
 * @package  Synerise\DataManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TypeLayout implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TypeLayout';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'margin_top' => 'string',
'margin_right' => 'string',
'margin_bottom' => 'string',
'margin_left' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'margin_top' => null,
'margin_right' => null,
'margin_bottom' => null,
'margin_left' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'margin_top' => 'marginTop',
'margin_right' => 'marginRight',
'margin_bottom' => 'marginBottom',
'margin_left' => 'marginLeft'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'margin_top' => 'setMarginTop',
'margin_right' => 'setMarginRight',
'margin_bottom' => 'setMarginBottom',
'margin_left' => 'setMarginLeft'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'margin_top' => 'getMarginTop',
'margin_right' => 'getMarginRight',
'margin_bottom' => 'getMarginBottom',
'margin_left' => 'getMarginLeft'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['margin_top'] = isset($data['margin_top']) ? $data['margin_top'] : null;
        $this->container['margin_right'] = isset($data['margin_right']) ? $data['margin_right'] : null;
        $this->container['margin_bottom'] = isset($data['margin_bottom']) ? $data['margin_bottom'] : null;
        $this->container['margin_left'] = isset($data['margin_left']) ? $data['margin_left'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['margin_top'] === null) {
            $invalidProperties[] = "'margin_top' can't be null";
        }
        if ($this->container['margin_right'] === null) {
            $invalidProperties[] = "'margin_right' can't be null";
        }
        if ($this->container['margin_bottom'] === null) {
            $invalidProperties[] = "'margin_bottom' can't be null";
        }
        if ($this->container['margin_left'] === null) {
            $invalidProperties[] = "'margin_left' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets margin_top
     *
     * @return string
     */
    public function getMarginTop()
    {
        return $this->container['margin_top'];
    }

    /**
     * Sets margin_top
     *
     * @param string $margin_top Top margin of the element
     *
     * @return $this
     */
    public function setMarginTop($margin_top)
    {
        $this->container['margin_top'] = $margin_top;

        return $this;
    }

    /**
     * Gets margin_right
     *
     * @return string
     */
    public function getMarginRight()
    {
        return $this->container['margin_right'];
    }

    /**
     * Sets margin_right
     *
     * @param string $margin_right Right margin of the element
     *
     * @return $this
     */
    public function setMarginRight($margin_right)
    {
        $this->container['margin_right'] = $margin_right;

        return $this;
    }

    /**
     * Gets margin_bottom
     *
     * @return string
     */
    public function getMarginBottom()
    {
        return $this->container['margin_bottom'];
    }

    /**
     * Sets margin_bottom
     *
     * @param string $margin_bottom Bottom margin of the element
     *
     * @return $this
     */
    public function setMarginBottom($margin_bottom)
    {
        $this->container['margin_bottom'] = $margin_bottom;

        return $this;
    }

    /**
     * Gets margin_left
     *
     * @return string
     */
    public function getMarginLeft()
    {
        return $this->container['margin_left'];
    }

    /**
     * Sets margin_left
     *
     * @param string $margin_left Left margin of the element
     *
     * @return $this
     */
    public function setMarginLeft($margin_left)
    {
        $this->container['margin_left'] = $margin_left;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
